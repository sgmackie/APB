; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25507.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG7761	DB	'Usage: exponential_break, duration, number of points, st'
	DB	'art value, end value', 0aH, 00H
	ORG $+2
$SG7763	DB	'Error: Duration (%f) must be positive', 0aH, 00H
	ORG $+1
$SG7765	DB	'Error: Number of points (%d) must be positive', 0aH, 00H
	ORG $+1
$SG7767	DB	'Error: Start (%f) and end (%f) values are the same ', 0aH
	DB	00H
	ORG $+3
$SG7770	DB	'%.4lf', 09H, '%.8lf', 0aH, 00H
	ORG $+3
$SG7771	DB	'Done', 0aH, 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	fprintf
PUBLIC	main
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3ff0000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	atof:PROC
EXTRN	atoi:PROC
EXTRN	pow:PROC
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$fprintf
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN12
	DD	imagerel $LN12+805
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
xdata	SEGMENT
$unwind$main DD	021001H
	DD	0130110H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File k:\audio\editing\current\programming\the_audio_programming_book\test_code\chapter_1\1.8.2\code\exponential_break.c
_TEXT	SEGMENT
num_points$ = 32
i$ = 36
position_start$ = 40
value_end$ = 48
value_start$ = 56
value_range$ = 64
duration$ = 72
current_step$ = 80
lowest_amplitude$ = 88
position_end$ = 96
offset$ = 104
tv145 = 112
tv152 = 120
factor$ = 128
step$ = 136
argc$ = 160
argv$ = 168
main	PROC

; 6    : {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 7    :     int i, num_points;
; 8    :     double value_start, value_end, value_range;
; 9    :     double duration, step, position_start, position_end, current_step;
; 10   :     double factor, offset;
; 11   :     const double lowest_amplitude = 1.0e-4; // Expression for -80db

  00010	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  00018	f2 0f 11 44 24
	58		 movsd	 QWORD PTR lowest_amplitude$[rsp], xmm0

; 12   : 
; 13   :     if (argc != 5)

  0001e	83 bc 24 a0 00
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  00026	74 23		 je	 SHORT $LN5@main

; 14   :     {
; 15   :         fprintf(stderr, "Usage: exponential_break, duration, number of points, start value, end value\n");

  00028	b9 02 00 00 00	 mov	 ecx, 2
  0002d	e8 00 00 00 00	 call	 __acrt_iob_func
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7761
  00039	48 8b c8	 mov	 rcx, rax
  0003c	e8 00 00 00 00	 call	 fprintf

; 16   :         return 1;

  00041	b8 01 00 00 00	 mov	 eax, 1
  00046	e9 d2 02 00 00	 jmp	 $LN1@main
$LN5@main:

; 17   :     }
; 18   : 
; 19   :     duration = atof(argv[1]);

  0004b	b8 08 00 00 00	 mov	 eax, 8
  00050	48 6b c0 01	 imul	 rax, rax, 1
  00054	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0005c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00060	e8 00 00 00 00	 call	 atof
  00065	f2 0f 11 44 24
	48		 movsd	 QWORD PTR duration$[rsp], xmm0

; 20   : 
; 21   :     if(duration <= 0.0)

  0006b	0f 57 c0	 xorps	 xmm0, xmm0
  0006e	66 0f 2f 44 24
	48		 comisd	 xmm0, QWORD PTR duration$[rsp]
  00074	72 2e		 jb	 SHORT $LN6@main

; 22   :     {
; 23   :         fprintf(stderr, "Error: Duration (%f) must be positive\n", duration);

  00076	b9 02 00 00 00	 mov	 ecx, 2
  0007b	e8 00 00 00 00	 call	 __acrt_iob_func
  00080	f2 0f 10 54 24
	48		 movsd	 xmm2, QWORD PTR duration$[rsp]
  00086	66 49 0f 7e d0	 movq	 r8, xmm2
  0008b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7763
  00092	48 8b c8	 mov	 rcx, rax
  00095	e8 00 00 00 00	 call	 fprintf

; 24   :         return 1;

  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	e9 79 02 00 00	 jmp	 $LN1@main
$LN6@main:

; 25   :     }
; 26   : 
; 27   :     num_points = atoi(argv[2]);

  000a4	b8 08 00 00 00	 mov	 eax, 8
  000a9	48 6b c0 02	 imul	 rax, rax, 2
  000ad	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000b5	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000b9	e8 00 00 00 00	 call	 atoi
  000be	89 44 24 20	 mov	 DWORD PTR num_points$[rsp], eax

; 28   : 
; 29   :     if(num_points <= 0)

  000c2	83 7c 24 20 00	 cmp	 DWORD PTR num_points$[rsp], 0
  000c7	7f 28		 jg	 SHORT $LN7@main

; 30   :     {
; 31   :         fprintf(stderr, "Error: Number of points (%d) must be positive\n", num_points);

  000c9	b9 02 00 00 00	 mov	 ecx, 2
  000ce	e8 00 00 00 00	 call	 __acrt_iob_func
  000d3	44 8b 44 24 20	 mov	 r8d, DWORD PTR num_points$[rsp]
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7765
  000df	48 8b c8	 mov	 rcx, rax
  000e2	e8 00 00 00 00	 call	 fprintf

; 32   :         return 1;

  000e7	b8 01 00 00 00	 mov	 eax, 1
  000ec	e9 2c 02 00 00	 jmp	 $LN1@main
$LN7@main:

; 33   :     }
; 34   : 
; 35   :     step = duration / num_points;

  000f1	f2 0f 2a 44 24
	20		 cvtsi2sd xmm0, DWORD PTR num_points$[rsp]
  000f7	f2 0f 10 4c 24
	48		 movsd	 xmm1, QWORD PTR duration$[rsp]
  000fd	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00101	0f 28 c1	 movaps	 xmm0, xmm1
  00104	f2 0f 11 84 24
	88 00 00 00	 movsd	 QWORD PTR step$[rsp], xmm0

; 36   : 
; 37   :     value_start = atof(argv[3]);

  0010d	b8 08 00 00 00	 mov	 eax, 8
  00112	48 6b c0 03	 imul	 rax, rax, 3
  00116	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0011e	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00122	e8 00 00 00 00	 call	 atof
  00127	f2 0f 11 44 24
	38		 movsd	 QWORD PTR value_start$[rsp], xmm0

; 38   :     value_end = atof(argv[4]);

  0012d	b8 08 00 00 00	 mov	 eax, 8
  00132	48 6b c0 04	 imul	 rax, rax, 4
  00136	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0013e	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00142	e8 00 00 00 00	 call	 atof
  00147	f2 0f 11 44 24
	30		 movsd	 QWORD PTR value_end$[rsp], xmm0

; 39   : 
; 40   :     value_range = value_end - value_start;

  0014d	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR value_end$[rsp]
  00153	f2 0f 5c 44 24
	38		 subsd	 xmm0, QWORD PTR value_start$[rsp]
  00159	f2 0f 11 44 24
	40		 movsd	 QWORD PTR value_range$[rsp], xmm0

; 41   : 
; 42   :     if(value_range == 0.0)

  0015f	f2 0f 10 44 24
	40		 movsd	 xmm0, QWORD PTR value_range$[rsp]
  00165	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0016d	7a 3b		 jp	 SHORT $LN8@main
  0016f	75 39		 jne	 SHORT $LN8@main

; 43   :     {
; 44   :         fprintf(stderr, "Error: Start (%f) and end (%f) values are the same \n", value_start, value_end);

  00171	b9 02 00 00 00	 mov	 ecx, 2
  00176	e8 00 00 00 00	 call	 __acrt_iob_func
  0017b	f2 0f 10 5c 24
	30		 movsd	 xmm3, QWORD PTR value_end$[rsp]
  00181	66 49 0f 7e d9	 movq	 r9, xmm3
  00186	f2 0f 10 54 24
	38		 movsd	 xmm2, QWORD PTR value_start$[rsp]
  0018c	66 49 0f 7e d0	 movq	 r8, xmm2
  00191	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7767
  00198	48 8b c8	 mov	 rcx, rax
  0019b	e8 00 00 00 00	 call	 fprintf

; 45   :         return 1;

  001a0	b8 01 00 00 00	 mov	 eax, 1
  001a5	e9 73 01 00 00	 jmp	 $LN1@main
$LN8@main:

; 46   :     }
; 47   : 
; 48   :     if(value_start > value_end)

  001aa	f2 0f 10 44 24
	38		 movsd	 xmm0, QWORD PTR value_start$[rsp]
  001b0	66 0f 2f 44 24
	30		 comisd	 xmm0, QWORD PTR value_end$[rsp]
  001b6	76 3b		 jbe	 SHORT $LN9@main

; 49   :     {
; 50   :         position_start = 1.0;

  001b8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001c0	f2 0f 11 44 24
	28		 movsd	 QWORD PTR position_start$[rsp], xmm0

; 51   :         position_end = lowest_amplitude;

  001c6	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR lowest_amplitude$[rsp]
  001cc	f2 0f 11 44 24
	60		 movsd	 QWORD PTR position_end$[rsp], xmm0

; 52   :         value_range = -value_range;

  001d2	f2 0f 10 44 24
	40		 movsd	 xmm0, QWORD PTR value_range$[rsp]
  001d8	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  001df	f2 0f 11 44 24
	40		 movsd	 QWORD PTR value_range$[rsp], xmm0

; 53   :         offset = value_end;

  001e5	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR value_end$[rsp]
  001eb	f2 0f 11 44 24
	68		 movsd	 QWORD PTR offset$[rsp], xmm0

; 54   :     }    

  001f1	eb 26		 jmp	 SHORT $LN10@main
$LN9@main:

; 55   : 
; 56   :     else
; 57   :     {
; 58   :         position_start  = lowest_amplitude;

  001f3	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR lowest_amplitude$[rsp]
  001f9	f2 0f 11 44 24
	28		 movsd	 QWORD PTR position_start$[rsp], xmm0

; 59   :         position_end = 1.0;

  001ff	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00207	f2 0f 11 44 24
	60		 movsd	 QWORD PTR position_end$[rsp], xmm0

; 60   :         offset = value_start;

  0020d	f2 0f 10 44 24
	38		 movsd	 xmm0, QWORD PTR value_start$[rsp]
  00213	f2 0f 11 44 24
	68		 movsd	 QWORD PTR offset$[rsp], xmm0
$LN10@main:

; 61   :     }
; 62   : 
; 63   :     current_step = 0.0;

  00219	0f 57 c0	 xorps	 xmm0, xmm0
  0021c	f2 0f 11 44 24
	50		 movsd	 QWORD PTR current_step$[rsp], xmm0

; 64   : 
; 65   :     factor = pow(position_end / position_start, 1.0 / num_points);

  00222	f2 0f 2a 44 24
	20		 cvtsi2sd xmm0, DWORD PTR num_points$[rsp]
  00228	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00230	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00234	0f 28 c1	 movaps	 xmm0, xmm1
  00237	f2 0f 10 4c 24
	60		 movsd	 xmm1, QWORD PTR position_end$[rsp]
  0023d	f2 0f 5e 4c 24
	28		 divsd	 xmm1, QWORD PTR position_start$[rsp]
  00243	f2 0f 11 4c 24
	70		 movsd	 QWORD PTR tv145[rsp], xmm1
  00249	0f 28 c8	 movaps	 xmm1, xmm0
  0024c	f2 0f 10 44 24
	70		 movsd	 xmm0, QWORD PTR tv145[rsp]
  00252	e8 00 00 00 00	 call	 pow
  00257	f2 0f 11 84 24
	80 00 00 00	 movsd	 QWORD PTR factor$[rsp], xmm0

; 66   : 
; 67   :     for (i = 0; i < num_points; i++)

  00260	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00268	eb 0a		 jmp	 SHORT $LN4@main
$LN2@main:
  0026a	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0026e	ff c0		 inc	 eax
  00270	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@main:
  00274	8b 44 24 20	 mov	 eax, DWORD PTR num_points$[rsp]
  00278	39 44 24 24	 cmp	 DWORD PTR i$[rsp], eax
  0027c	0f 8d 80 00 00
	00		 jge	 $LN3@main

; 68   :     {
; 69   :         fprintf(stdout, "%.4lf\t%.8lf\n", current_step, offset + (position_start * value_range));

  00282	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR position_start$[rsp]
  00288	f2 0f 59 44 24
	40		 mulsd	 xmm0, QWORD PTR value_range$[rsp]
  0028e	f2 0f 10 4c 24
	68		 movsd	 xmm1, QWORD PTR offset$[rsp]
  00294	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00298	0f 28 c1	 movaps	 xmm0, xmm1
  0029b	f2 0f 11 44 24
	78		 movsd	 QWORD PTR tv152[rsp], xmm0
  002a1	b9 01 00 00 00	 mov	 ecx, 1
  002a6	e8 00 00 00 00	 call	 __acrt_iob_func
  002ab	f2 0f 10 44 24
	78		 movsd	 xmm0, QWORD PTR tv152[rsp]
  002b1	0f 28 d8	 movaps	 xmm3, xmm0
  002b4	66 49 0f 7e d9	 movq	 r9, xmm3
  002b9	f2 0f 10 54 24
	50		 movsd	 xmm2, QWORD PTR current_step$[rsp]
  002bf	66 49 0f 7e d0	 movq	 r8, xmm2
  002c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7770
  002cb	48 8b c8	 mov	 rcx, rax
  002ce	e8 00 00 00 00	 call	 fprintf

; 70   :         position_start *= factor;

  002d3	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR position_start$[rsp]
  002d9	f2 0f 59 84 24
	80 00 00 00	 mulsd	 xmm0, QWORD PTR factor$[rsp]
  002e2	f2 0f 11 44 24
	28		 movsd	 QWORD PTR position_start$[rsp], xmm0

; 71   :         current_step += step;

  002e8	f2 0f 10 44 24
	50		 movsd	 xmm0, QWORD PTR current_step$[rsp]
  002ee	f2 0f 58 84 24
	88 00 00 00	 addsd	 xmm0, QWORD PTR step$[rsp]
  002f7	f2 0f 11 44 24
	50		 movsd	 QWORD PTR current_step$[rsp], xmm0

; 72   :     }

  002fd	e9 68 ff ff ff	 jmp	 $LN2@main
$LN3@main:

; 73   : 
; 74   :     //fprintf(stdout, "%.4lf\t%.8lf\n", current_step, offset + (position_start * value_range));
; 75   :     fprintf(stderr, "Done\n");

  00302	b9 02 00 00 00	 mov	 ecx, 2
  00307	e8 00 00 00 00	 call	 __acrt_iob_func
  0030c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7771
  00313	48 8b c8	 mov	 rcx, rax
  00316	e8 00 00 00 00	 call	 fprintf

; 76   : 
; 77   :     return 0;

  0031b	33 c0		 xor	 eax, eax
$LN1@main:

; 78   : }

  0031d	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00324	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT fprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Stream$ = 64
_Format$ = 72
fprintf	PROC						; COMDAT

; 833  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 834  :         int _Result;
; 835  :         va_list _ArgList;
; 836  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 837  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Stream$[rsp]
  00034	e8 00 00 00 00	 call	 _vfprintf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 838  :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 839  :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 840  :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 640  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 641  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0002c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00036	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00039	e8 00 00 00 00	 call	 __stdio_common_vfprintf

; 642  :     }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
