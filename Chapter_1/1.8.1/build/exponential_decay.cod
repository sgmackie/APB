; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25507.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG7756	DB	'Usage: exponential_decay duration time, num_steps', 0aH, 00H
	ORG $+5
$SG7757	DB	'%.4lf', 09H, '%.8lf', 0aH, 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	main
PUBLIC	__real@3ff0000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	atof:PROC
EXTRN	exp:PROC
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN7
	DD	imagerel $LN7+318
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
xdata	SEGMENT
$unwind$main DD	010d01H
	DD	0c20dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File k:\audio\editing\current\programming\the_audio_programming_book\test_code\chapter_1\1.8.1\code\exponential_decay.c
_TEXT	SEGMENT
i$ = 32
num_steps$ = 36
x$ = 40
step$ = 48
increment$ = 56
duration$ = 64
time$ = 72
ratio$ = 80
argc$ = 112
argv$ = 120
main	PROC

; 8    : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 9    :     int i, num_steps;
; 10   :     double step, x, ratio, time, increment, duration;
; 11   : 
; 12   :     if(argc != 4)

  0000d	83 7c 24 70 04	 cmp	 DWORD PTR argc$[rsp], 4
  00012	74 16		 je	 SHORT $LN5@main

; 13   :     {
; 14   :         printf("Usage: exponential_decay duration time, num_steps\n");

  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7756
  0001b	e8 00 00 00 00	 call	 printf

; 15   :         return 1;

  00020	b8 01 00 00 00	 mov	 eax, 1
  00025	e9 0f 01 00 00	 jmp	 $LN1@main
$LN5@main:

; 16   :     }
; 17   : 
; 18   :     duration = atof(argv[1]);

  0002a	b8 08 00 00 00	 mov	 eax, 8
  0002f	48 6b c0 01	 imul	 rax, rax, 1
  00033	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00038	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0003c	e8 00 00 00 00	 call	 atof
  00041	f2 0f 11 44 24
	40		 movsd	 QWORD PTR duration$[rsp], xmm0

; 19   :     time = atof(argv[2]);

  00047	b8 08 00 00 00	 mov	 eax, 8
  0004c	48 6b c0 02	 imul	 rax, rax, 2
  00050	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00055	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00059	e8 00 00 00 00	 call	 atof
  0005e	f2 0f 11 44 24
	48		 movsd	 QWORD PTR time$[rsp], xmm0

; 20   :     num_steps = atof(argv[3]);

  00064	b8 08 00 00 00	 mov	 eax, 8
  00069	48 6b c0 03	 imul	 rax, rax, 3
  0006d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00072	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00076	e8 00 00 00 00	 call	 atof
  0007b	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0007f	89 44 24 24	 mov	 DWORD PTR num_steps$[rsp], eax

; 21   : 
; 22   :     increment = duration / num_steps;

  00083	f2 0f 2a 44 24
	24		 cvtsi2sd xmm0, DWORD PTR num_steps$[rsp]
  00089	f2 0f 10 4c 24
	40		 movsd	 xmm1, QWORD PTR duration$[rsp]
  0008f	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00093	0f 28 c1	 movaps	 xmm0, xmm1
  00096	f2 0f 11 44 24
	38		 movsd	 QWORD PTR increment$[rsp], xmm0

; 23   :     ratio = exp(-increment/time);

  0009c	f2 0f 10 44 24
	38		 movsd	 xmm0, QWORD PTR increment$[rsp]
  000a2	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  000a9	f2 0f 5e 44 24
	48		 divsd	 xmm0, QWORD PTR time$[rsp]
  000af	e8 00 00 00 00	 call	 exp
  000b4	f2 0f 11 44 24
	50		 movsd	 QWORD PTR ratio$[rsp], xmm0

; 24   :     x = 1.0;

  000ba	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000c2	f2 0f 11 44 24
	28		 movsd	 QWORD PTR x$[rsp], xmm0

; 25   :     step = 0.0;

  000c8	0f 57 c0	 xorps	 xmm0, xmm0
  000cb	f2 0f 11 44 24
	30		 movsd	 QWORD PTR step$[rsp], xmm0

; 26   : 
; 27   :     for(i = 0; i < num_steps; i++)

  000d1	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000d9	eb 0a		 jmp	 SHORT $LN4@main
$LN2@main:
  000db	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000df	ff c0		 inc	 eax
  000e1	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@main:
  000e5	8b 44 24 24	 mov	 eax, DWORD PTR num_steps$[rsp]
  000e9	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  000ed	7d 48		 jge	 SHORT $LN3@main

; 28   :     {
; 29   :         printf("%.4lf\t%.8lf\n", step, x);

  000ef	f2 0f 10 54 24
	28		 movsd	 xmm2, QWORD PTR x$[rsp]
  000f5	66 49 0f 7e d0	 movq	 r8, xmm2
  000fa	f2 0f 10 4c 24
	30		 movsd	 xmm1, QWORD PTR step$[rsp]
  00100	66 48 0f 7e ca	 movq	 rdx, xmm1
  00105	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7757
  0010c	e8 00 00 00 00	 call	 printf

; 30   :         x = ratio * x;

  00111	f2 0f 10 44 24
	50		 movsd	 xmm0, QWORD PTR ratio$[rsp]
  00117	f2 0f 59 44 24
	28		 mulsd	 xmm0, QWORD PTR x$[rsp]
  0011d	f2 0f 11 44 24
	28		 movsd	 QWORD PTR x$[rsp], xmm0

; 31   :         step += increment;

  00123	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR step$[rsp]
  00129	f2 0f 58 44 24
	38		 addsd	 xmm0, QWORD PTR increment$[rsp]
  0012f	f2 0f 11 44 24
	30		 movsd	 QWORD PTR step$[rsp], xmm0

; 32   :     }

  00135	eb a4		 jmp	 SHORT $LN2@main
$LN3@main:

; 33   : 
; 34   :     return 0;

  00137	33 c0		 xor	 eax, eax
$LN1@main:

; 35   : }

  00139	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0013d	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT

; 952  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 953  :         int _Result;
; 954  :         va_list _ArgList;
; 955  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 956  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00022	b9 01 00 00 00	 mov	 ecx, 1
  00027	e8 00 00 00 00	 call	 __acrt_iob_func
  0002c	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00031	45 33 c0	 xor	 r8d, r8d
  00034	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Format$[rsp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	e8 00 00 00 00	 call	 _vfprintf_l
  00041	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 957  :         __crt_va_end(_ArgList);

  00045	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 958  :         return _Result;

  0004e	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 959  :     }

  00052	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00056	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 640  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 641  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0002c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00036	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00039	e8 00 00 00 00	 call	 __stdio_common_vfprintf

; 642  :     }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
