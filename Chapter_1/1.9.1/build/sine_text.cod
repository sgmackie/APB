; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25507.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG7761	DB	'Usage: sine_text, number of samples, frequency, sample r'
	DB	'ate', 0aH, 00H
	ORG $+3
$SG7762	DB	'angle increment = %f', 00H
	ORG $+3
$SG7763	DB	'%.8lf', 09H, '%.8lf', 0aH, 00H
	ORG $+3
$SG7764	DB	'Done', 0aH, 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	fprintf
PUBLIC	main
PUBLIC	__real@401921fb54524550
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	atof:PROC
EXTRN	atoi:PROC
EXTRN	sin:PROC
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$fprintf
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN7
	DD	imagerel $LN7+376
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __real@401921fb54524550
CONST	SEGMENT
__real@401921fb54524550 DQ 0401921fb54524550r	; 6.28319
CONST	ENDS
xdata	SEGMENT
$unwind$main DD	010d01H
	DD	0c20dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File k:\audio\editing\current\programming\the_audio_programming_book\test_code\chapter_1\1.9.1\code\sine_text.c
_TEXT	SEGMENT
i$ = 32
num_samples$ = 36
sample$ = 40
angle_increment$ = 48
double_pi$ = 56
frequency$ = 64
sample_rate$ = 72
tv95 = 80
argc$ = 112
argv$ = 120
main	PROC

; 12   : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 13   :     int i, num_samples;
; 14   :     double sample, frequency, sample_rate, angle_increment;
; 15   :     double double_pi = 2.0 * M_PI;

  0000d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401921fb54524550
  00015	f2 0f 11 44 24
	38		 movsd	 QWORD PTR double_pi$[rsp], xmm0

; 16   : 
; 17   :     if(argc != ARG_NUM_ARGS)

  0001b	83 7c 24 70 04	 cmp	 DWORD PTR argc$[rsp], 4
  00020	74 23		 je	 SHORT $LN5@main

; 18   :     {
; 19   :         fprintf(stderr, "Usage: sine_text, number of samples, frequency, sample rate\n");

  00022	b9 02 00 00 00	 mov	 ecx, 2
  00027	e8 00 00 00 00	 call	 __acrt_iob_func
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7761
  00033	48 8b c8	 mov	 rcx, rax
  00036	e8 00 00 00 00	 call	 fprintf

; 20   :         return 1;

  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	e9 2e 01 00 00	 jmp	 $LN1@main
$LN5@main:

; 21   :     }
; 22   : 
; 23   :     num_samples = atoi(argv[ARG_NUM_SAMPLES]);

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 01	 imul	 rax, rax, 1
  0004e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00053	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00057	e8 00 00 00 00	 call	 atoi
  0005c	89 44 24 24	 mov	 DWORD PTR num_samples$[rsp], eax

; 24   :     frequency = atof(argv[ARG_FREQUENCY]);

  00060	b8 08 00 00 00	 mov	 eax, 8
  00065	48 6b c0 02	 imul	 rax, rax, 2
  00069	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  0006e	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00072	e8 00 00 00 00	 call	 atof
  00077	f2 0f 11 44 24
	40		 movsd	 QWORD PTR frequency$[rsp], xmm0

; 25   :     sample_rate = atof(argv[ARG_SAMPLE_RATE]);

  0007d	b8 08 00 00 00	 mov	 eax, 8
  00082	48 6b c0 03	 imul	 rax, rax, 3
  00086	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  0008b	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0008f	e8 00 00 00 00	 call	 atof
  00094	f2 0f 11 44 24
	48		 movsd	 QWORD PTR sample_rate$[rsp], xmm0

; 26   : 
; 27   :     angle_increment = double_pi * frequency / sample_rate;

  0009a	f2 0f 10 44 24
	38		 movsd	 xmm0, QWORD PTR double_pi$[rsp]
  000a0	f2 0f 59 44 24
	40		 mulsd	 xmm0, QWORD PTR frequency$[rsp]
  000a6	f2 0f 5e 44 24
	48		 divsd	 xmm0, QWORD PTR sample_rate$[rsp]
  000ac	f2 0f 11 44 24
	30		 movsd	 QWORD PTR angle_increment$[rsp], xmm0

; 28   :     
; 29   :     fprintf(stdout, "angle increment = %f", angle_increment);

  000b2	b9 01 00 00 00	 mov	 ecx, 1
  000b7	e8 00 00 00 00	 call	 __acrt_iob_func
  000bc	f2 0f 10 54 24
	30		 movsd	 xmm2, QWORD PTR angle_increment$[rsp]
  000c2	66 49 0f 7e d0	 movq	 r8, xmm2
  000c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7762
  000ce	48 8b c8	 mov	 rcx, rax
  000d1	e8 00 00 00 00	 call	 fprintf

; 30   : 
; 31   :     for (i = 0; i < num_samples; i++)

  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000de	eb 0a		 jmp	 SHORT $LN4@main
$LN2@main:
  000e0	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000e4	ff c0		 inc	 eax
  000e6	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@main:
  000ea	8b 44 24 24	 mov	 eax, DWORD PTR num_samples$[rsp]
  000ee	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  000f2	7d 64		 jge	 SHORT $LN3@main

; 32   :     {
; 33   :         sample = sin(angle_increment * i);

  000f4	f2 0f 2a 44 24
	20		 cvtsi2sd xmm0, DWORD PTR i$[rsp]
  000fa	f2 0f 10 4c 24
	30		 movsd	 xmm1, QWORD PTR angle_increment$[rsp]
  00100	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00104	0f 28 c1	 movaps	 xmm0, xmm1
  00107	e8 00 00 00 00	 call	 sin
  0010c	f2 0f 11 44 24
	28		 movsd	 QWORD PTR sample$[rsp], xmm0

; 34   :         //fprintf(stdout, "%.8lf\n", sample);
; 35   :         fprintf(stdout, "%.8lf\t%.8lf\n", sample, sample * sample);

  00112	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR sample$[rsp]
  00118	f2 0f 59 44 24
	28		 mulsd	 xmm0, QWORD PTR sample$[rsp]
  0011e	f2 0f 11 44 24
	50		 movsd	 QWORD PTR tv95[rsp], xmm0
  00124	b9 01 00 00 00	 mov	 ecx, 1
  00129	e8 00 00 00 00	 call	 __acrt_iob_func
  0012e	f2 0f 10 44 24
	50		 movsd	 xmm0, QWORD PTR tv95[rsp]
  00134	0f 28 d8	 movaps	 xmm3, xmm0
  00137	66 49 0f 7e d9	 movq	 r9, xmm3
  0013c	f2 0f 10 54 24
	28		 movsd	 xmm2, QWORD PTR sample$[rsp]
  00142	66 49 0f 7e d0	 movq	 r8, xmm2
  00147	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7763
  0014e	48 8b c8	 mov	 rcx, rax
  00151	e8 00 00 00 00	 call	 fprintf

; 36   :     }

  00156	eb 88		 jmp	 SHORT $LN2@main
$LN3@main:

; 37   : 
; 38   :     fprintf(stderr, "Done\n");

  00158	b9 02 00 00 00	 mov	 ecx, 2
  0015d	e8 00 00 00 00	 call	 __acrt_iob_func
  00162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7764
  00169	48 8b c8	 mov	 rcx, rax
  0016c	e8 00 00 00 00	 call	 fprintf

; 39   : 
; 40   :     return 0;

  00171	33 c0		 xor	 eax, eax
$LN1@main:

; 41   : }

  00173	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00177	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT fprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Stream$ = 64
_Format$ = 72
fprintf	PROC						; COMDAT

; 833  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 834  :         int _Result;
; 835  :         va_list _ArgList;
; 836  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 837  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Stream$[rsp]
  00034	e8 00 00 00 00	 call	 _vfprintf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 838  :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 839  :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 840  :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 640  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 641  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0002c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00036	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00039	e8 00 00 00 00	 call	 __stdio_common_vfprintf

; 642  :     }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
