; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25507.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG8621	DB	'Enter MIDI note (0-127):', 0aH, 00H
	ORG $+6
$SG8623	DB	'Error reading the input', 0aH, 00H
	ORG $+7
$SG8625	DB	'Have a nice day!', 0aH, 00H
	ORG $+6
$SG8627	DB	'Cannot accept floating points', 0aH, 00H
	ORG $+1
$SG8629	DB	'Sorry - %s is beyond the MIDI range!', 0aH, 00H
	ORG $+2
$SG8631	DB	'Sorry - %s is a negative number', 0aH, 00H
	ORG $+7
$SG8632	DB	'Frequency of MIDI note %d = %f', 0aH, 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	main
PUBLIC	__real@3fb5555555555555
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@406b800000000000
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	atoi:PROC
EXTRN	pow:PROC
EXTRN	strlen:PROC
EXTRN	gets:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN10
	DD	imagerel $LN10+477
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __real@406b800000000000
CONST	SEGMENT
__real@406b800000000000 DQ 0406b800000000000r	; 220
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fb5555555555555
CONST	SEGMENT
__real@3fb5555555555555 DQ 03fb5555555555555r	; 0.0833333
CONST	ENDS
xdata	SEGMENT
$unwind$main DD	021919H
	DD	02f0107H
	DD	imagerel __GSHandlerCheck
	DD	0160H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File k:\audio\editing\current\programming\the_audio_programming_book\test_code\chapter_1\1.3\code\interactive_midi_freq.c
_TEXT	SEGMENT
input_length$ = 32
midinote$ = 36
tv91 = 40
semitone_ratio$ = 48
c5$ = 56
result$ = 64
c0$ = 72
frequency$ = 80
message$ = 96
__$ArrayPad$ = 352
main	PROC

; 9    : {

$LN10:
  00000	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00007	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000e	48 33 c4	 xor	 rax, rsp
  00011	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 10   : 	double c5, c0, semitone_ratio, frequency;
; 11   : 	int midinote;
; 12   : 	char message[256];
; 13   : 	char* result;
; 14   : 	int input_length;
; 15   : 	
; 16   : 	semitone_ratio = pow(2, 1.0/12);

  00019	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb5555555555555
  00021	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4000000000000000
  00029	e8 00 00 00 00	 call	 pow
  0002e	f2 0f 11 44 24
	30		 movsd	 QWORD PTR semitone_ratio$[rsp], xmm0

; 17   : 	c5 = 220.0 * pow(semitone_ratio, 3);

  00034	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4008000000000000
  0003c	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR semitone_ratio$[rsp]
  00042	e8 00 00 00 00	 call	 pow
  00047	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@406b800000000000
  0004f	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00053	0f 28 c1	 movaps	 xmm0, xmm1
  00056	f2 0f 11 44 24
	38		 movsd	 QWORD PTR c5$[rsp], xmm0

; 18   : 	c0 = c5 * pow(0.5, 5);

  0005c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4014000000000000
  00064	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0006c	e8 00 00 00 00	 call	 pow
  00071	f2 0f 10 4c 24
	38		 movsd	 xmm1, QWORD PTR c5$[rsp]
  00077	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0007b	0f 28 c1	 movaps	 xmm0, xmm1
  0007e	f2 0f 11 44 24
	48		 movsd	 QWORD PTR c0$[rsp], xmm0

; 19   : 	
; 20   : 	printf("Enter MIDI note (0-127):\n");

  00084	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG8621
  0008b	e8 00 00 00 00	 call	 printf

; 21   : 	result = gets(message);

  00090	48 8d 4c 24 60	 lea	 rcx, QWORD PTR message$[rsp]
  00095	e8 00 00 00 00	 call	 gets
  0009a	48 98		 cdqe
  0009c	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 22   : 	if(result == NULL)

  000a1	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  000a7	75 16		 jne	 SHORT $LN4@main

; 23   : 		{
; 24   : 			printf("Error reading the input\n");

  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG8623
  000b0	e8 00 00 00 00	 call	 printf

; 25   : 			return 1;

  000b5	b8 01 00 00 00	 mov	 eax, 1
  000ba	e9 06 01 00 00	 jmp	 $LN1@main
$LN4@main:

; 26   : 		}
; 27   : 	
; 28   : 	if(message[0] == '\0')

  000bf	b8 01 00 00 00	 mov	 eax, 1
  000c4	48 6b c0 00	 imul	 rax, rax, 0
  000c8	0f be 44 04 60	 movsx	 eax, BYTE PTR message$[rsp+rax]
  000cd	85 c0		 test	 eax, eax
  000cf	75 16		 jne	 SHORT $LN5@main

; 29   : 		{
; 30   : 			printf("Have a nice day!\n");

  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG8625
  000d8	e8 00 00 00 00	 call	 printf

; 31   : 			return 1;

  000dd	b8 01 00 00 00	 mov	 eax, 1
  000e2	e9 de 00 00 00	 jmp	 $LN1@main
$LN5@main:

; 32   : 		}
; 33   : 	
; 34   : 	input_length = strlen(message);

  000e7	48 8d 4c 24 60	 lea	 rcx, QWORD PTR message$[rsp]
  000ec	e8 00 00 00 00	 call	 strlen
  000f1	89 44 24 20	 mov	 DWORD PTR input_length$[rsp], eax
$LN2@main:

; 35   : 	while(input_length--)

  000f5	8b 44 24 20	 mov	 eax, DWORD PTR input_length$[rsp]
  000f9	89 44 24 28	 mov	 DWORD PTR tv91[rsp], eax
  000fd	8b 44 24 20	 mov	 eax, DWORD PTR input_length$[rsp]
  00101	ff c8		 dec	 eax
  00103	89 44 24 20	 mov	 DWORD PTR input_length$[rsp], eax
  00107	83 7c 24 28 00	 cmp	 DWORD PTR tv91[rsp], 0
  0010c	74 27		 je	 SHORT $LN3@main

; 36   : 		{
; 37   : 			if(message[input_length] == '.')

  0010e	48 63 44 24 20	 movsxd	 rax, DWORD PTR input_length$[rsp]
  00113	0f be 44 04 60	 movsx	 eax, BYTE PTR message$[rsp+rax]
  00118	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0011b	75 16		 jne	 SHORT $LN6@main

; 38   : 			{
; 39   : 				printf("Cannot accept floating points\n");

  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG8627
  00124	e8 00 00 00 00	 call	 printf

; 40   : 				return 1;

  00129	b8 01 00 00 00	 mov	 eax, 1
  0012e	e9 92 00 00 00	 jmp	 $LN1@main
$LN6@main:

; 41   : 			}
; 42   : 		}

  00133	eb c0		 jmp	 SHORT $LN2@main
$LN3@main:

; 43   : 	
; 44   : 	
; 45   : 	midinote = atoi(message);

  00135	48 8d 4c 24 60	 lea	 rcx, QWORD PTR message$[rsp]
  0013a	e8 00 00 00 00	 call	 atoi
  0013f	89 44 24 24	 mov	 DWORD PTR midinote$[rsp], eax

; 46   : 	if(midinote > 127)

  00143	83 7c 24 24 7f	 cmp	 DWORD PTR midinote$[rsp], 127 ; 0000007fH
  00148	7e 18		 jle	 SHORT $LN7@main

; 47   : 		{
; 48   : 			printf("Sorry - %s is beyond the MIDI range!\n", message);

  0014a	48 8d 54 24 60	 lea	 rdx, QWORD PTR message$[rsp]
  0014f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG8629
  00156	e8 00 00 00 00	 call	 printf

; 49   : 			return 1;

  0015b	b8 01 00 00 00	 mov	 eax, 1
  00160	eb 63		 jmp	 SHORT $LN1@main
$LN7@main:

; 50   : 		}
; 51   : 		
; 52   : 	if(midinote <= 0)

  00162	83 7c 24 24 00	 cmp	 DWORD PTR midinote$[rsp], 0
  00167	7f 18		 jg	 SHORT $LN8@main

; 53   : 		{
; 54   : 			printf("Sorry - %s is a negative number\n", message);

  00169	48 8d 54 24 60	 lea	 rdx, QWORD PTR message$[rsp]
  0016e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG8631
  00175	e8 00 00 00 00	 call	 printf

; 55   : 			return 1;

  0017a	b8 01 00 00 00	 mov	 eax, 1
  0017f	eb 44		 jmp	 SHORT $LN1@main
$LN8@main:

; 56   : 		}
; 57   : 		
; 58   : 	frequency = c0 * pow(semitone_ratio, midinote);

  00181	f2 0f 2a 44 24
	24		 cvtsi2sd xmm0, DWORD PTR midinote$[rsp]
  00187	0f 28 c8	 movaps	 xmm1, xmm0
  0018a	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR semitone_ratio$[rsp]
  00190	e8 00 00 00 00	 call	 pow
  00195	f2 0f 10 4c 24
	48		 movsd	 xmm1, QWORD PTR c0$[rsp]
  0019b	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0019f	0f 28 c1	 movaps	 xmm0, xmm1
  001a2	f2 0f 11 44 24
	50		 movsd	 QWORD PTR frequency$[rsp], xmm0

; 59   : 	printf("Frequency of MIDI note %d = %f\n", midinote, frequency);

  001a8	f2 0f 10 54 24
	50		 movsd	 xmm2, QWORD PTR frequency$[rsp]
  001ae	66 49 0f 7e d0	 movq	 r8, xmm2
  001b3	8b 54 24 24	 mov	 edx, DWORD PTR midinote$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG8632
  001be	e8 00 00 00 00	 call	 printf

; 60   : 	
; 61   : 	return 0;

  001c3	33 c0		 xor	 eax, eax
$LN1@main:

; 62   : 		
; 63   : }

  001c5	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001cd	48 33 cc	 xor	 rcx, rsp
  001d0	e8 00 00 00 00	 call	 __security_check_cookie
  001d5	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  001dc	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT

; 952  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 953  :         int _Result;
; 954  :         va_list _ArgList;
; 955  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 956  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00022	b9 01 00 00 00	 mov	 ecx, 1
  00027	e8 00 00 00 00	 call	 __acrt_iob_func
  0002c	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00031	45 33 c0	 xor	 r8d, r8d
  00034	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Format$[rsp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	e8 00 00 00 00	 call	 _vfprintf_l
  00041	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 957  :         __crt_va_end(_ArgList);

  00045	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 958  :         return _Result;

  0004e	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 959  :     }

  00052	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00056	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 640  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 641  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0002c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00036	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00039	e8 00 00 00 00	 call	 __stdio_common_vfprintf

; 642  :     }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
