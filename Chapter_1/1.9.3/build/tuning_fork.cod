; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25507.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG7773	DB	'Usage: tuning_fork, outfile.txt, duration, frequency, sa'
	DB	'mple rate, slope', 0aH, 00H
	ORG $+2
$SG7774	DB	'w', 00H
	ORG $+2
$SG7776	DB	'Error: Unable to create output file %s', 0aH, 00H
$SG7777	DB	'%.8lf', 0aH, 00H
	ORG $+1
$SG7778	DB	'Done', 0aH, 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	fprintf
PUBLIC	printf
PUBLIC	main
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@401921fb54524550
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__acrt_iob_func:PROC
EXTRN	fclose:PROC
EXTRN	fopen:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	atof:PROC
EXTRN	exp:PROC
EXTRN	sin:PROC
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$fprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN8
	DD	imagerel $LN8+613
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@401921fb54524550
CONST	SEGMENT
__real@401921fb54524550 DQ 0401921fb54524550r	; 6.28319
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
xdata	SEGMENT
$unwind$main DD	021001H
	DD	0130110H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File k:\audio\editing\current\programming\the_audio_programming_book\test_code\chapter_1\1.9.3\code\tuning_fork.c
_TEXT	SEGMENT
i$ = 32
num_samples$ = 36
file_pointer$ = 40
x$ = 48
sample$ = 56
sample_rate$ = 64
duration$ = 72
tv76 = 80
double_pi$ = 88
frequency$ = 96
time$ = 104
slope$ = 112
angle_increment$ = 120
ratio$ = 128
max_sample$ = 136
argc$ = 160
argv$ = 168
main	PROC

; 12   : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 13   :     int i, num_samples;
; 14   :     double sample, duration, frequency, sample_rate, time, ratio, slope, angle_increment, x;
; 15   :     double double_pi = 2.0 * M_PI;

  00010	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401921fb54524550
  00018	f2 0f 11 44 24
	58		 movsd	 QWORD PTR double_pi$[rsp], xmm0

; 16   :     double max_sample = 0.0;

  0001e	0f 57 c0	 xorps	 xmm0, xmm0
  00021	f2 0f 11 84 24
	88 00 00 00	 movsd	 QWORD PTR max_sample$[rsp], xmm0

; 17   : 
; 18   :     FILE* file_pointer = NULL;

  0002a	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR file_pointer$[rsp], 0

; 19   : 
; 20   :     if(argc != ARG_NUM_ARGS)

  00033	83 bc 24 a0 00
	00 00 06	 cmp	 DWORD PTR argc$[rsp], 6
  0003b	74 23		 je	 SHORT $LN5@main

; 21   :     {
; 22   :         fprintf(stderr, "Usage: tuning_fork, outfile.txt, duration, frequency, sample rate, slope\n");

  0003d	b9 02 00 00 00	 mov	 ecx, 2
  00042	e8 00 00 00 00	 call	 __acrt_iob_func
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7773
  0004e	48 8b c8	 mov	 rcx, rax
  00051	e8 00 00 00 00	 call	 fprintf

; 23   :         return 1;

  00056	b8 01 00 00 00	 mov	 eax, 1
  0005b	e9 fd 01 00 00	 jmp	 $LN1@main
$LN5@main:

; 24   :     }
; 25   : 
; 26   :     file_pointer = fopen(argv[ARG_OUTFILE], "w");

  00060	b8 08 00 00 00	 mov	 eax, 8
  00065	48 6b c0 01	 imul	 rax, rax, 1
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7774
  00070	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00078	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0007c	e8 00 00 00 00	 call	 fopen
  00081	48 89 44 24 28	 mov	 QWORD PTR file_pointer$[rsp], rax

; 27   : 
; 28   :     if(file_pointer == NULL)

  00086	48 83 7c 24 28
	00		 cmp	 QWORD PTR file_pointer$[rsp], 0
  0008c	75 42		 jne	 SHORT $LN6@main

; 29   :     {
; 30   :         fprintf(stderr, "Error: Unable to create output file %s\n", argv[ARG_OUTFILE]);

  0008e	b8 08 00 00 00	 mov	 eax, 8
  00093	48 6b c0 01	 imul	 rax, rax, 1
  00097	48 89 44 24 50	 mov	 QWORD PTR tv76[rsp], rax
  0009c	b9 02 00 00 00	 mov	 ecx, 2
  000a1	e8 00 00 00 00	 call	 __acrt_iob_func
  000a6	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000ae	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv76[rsp]
  000b3	4c 8b 04 11	 mov	 r8, QWORD PTR [rcx+rdx]
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7776
  000be	48 8b c8	 mov	 rcx, rax
  000c1	e8 00 00 00 00	 call	 fprintf

; 31   :         return 1;

  000c6	b8 01 00 00 00	 mov	 eax, 1
  000cb	e9 8d 01 00 00	 jmp	 $LN1@main
$LN6@main:

; 32   :     }
; 33   : 
; 34   :     duration = atof(argv[ARG_DURATION]);

  000d0	b8 08 00 00 00	 mov	 eax, 8
  000d5	48 6b c0 02	 imul	 rax, rax, 2
  000d9	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e1	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000e5	e8 00 00 00 00	 call	 atof
  000ea	f2 0f 11 44 24
	48		 movsd	 QWORD PTR duration$[rsp], xmm0

; 35   :     frequency = atof(argv[ARG_FREQUENCY]);

  000f0	b8 08 00 00 00	 mov	 eax, 8
  000f5	48 6b c0 03	 imul	 rax, rax, 3
  000f9	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00101	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00105	e8 00 00 00 00	 call	 atof
  0010a	f2 0f 11 44 24
	60		 movsd	 QWORD PTR frequency$[rsp], xmm0

; 36   :     sample_rate = atof(argv[ARG_SAMPLE_RATE]);

  00110	b8 08 00 00 00	 mov	 eax, 8
  00115	48 6b c0 04	 imul	 rax, rax, 4
  00119	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00121	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00125	e8 00 00 00 00	 call	 atof
  0012a	f2 0f 11 44 24
	40		 movsd	 QWORD PTR sample_rate$[rsp], xmm0

; 37   :     slope = atof(argv[ARG_SLOPE]);

  00130	b8 08 00 00 00	 mov	 eax, 8
  00135	48 6b c0 05	 imul	 rax, rax, 5
  00139	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00141	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00145	e8 00 00 00 00	 call	 atof
  0014a	f2 0f 11 44 24
	70		 movsd	 QWORD PTR slope$[rsp], xmm0

; 38   : 
; 39   :     num_samples = (int) (duration * sample_rate);

  00150	f2 0f 10 44 24
	48		 movsd	 xmm0, QWORD PTR duration$[rsp]
  00156	f2 0f 59 44 24
	40		 mulsd	 xmm0, QWORD PTR sample_rate$[rsp]
  0015c	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00160	89 44 24 24	 mov	 DWORD PTR num_samples$[rsp], eax

; 40   :     angle_increment = double_pi * frequency / sample_rate;

  00164	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR double_pi$[rsp]
  0016a	f2 0f 59 44 24
	60		 mulsd	 xmm0, QWORD PTR frequency$[rsp]
  00170	f2 0f 5e 44 24
	40		 divsd	 xmm0, QWORD PTR sample_rate$[rsp]
  00176	f2 0f 11 44 24
	78		 movsd	 QWORD PTR angle_increment$[rsp], xmm0

; 41   :     time = duration / num_samples;

  0017c	f2 0f 2a 44 24
	24		 cvtsi2sd xmm0, DWORD PTR num_samples$[rsp]
  00182	f2 0f 10 4c 24
	48		 movsd	 xmm1, QWORD PTR duration$[rsp]
  00188	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0018c	0f 28 c1	 movaps	 xmm0, xmm1
  0018f	f2 0f 11 44 24
	68		 movsd	 QWORD PTR time$[rsp], xmm0

; 42   :     ratio = exp(-time / slope);

  00195	f2 0f 10 44 24
	68		 movsd	 xmm0, QWORD PTR time$[rsp]
  0019b	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  001a2	f2 0f 5e 44 24
	70		 divsd	 xmm0, QWORD PTR slope$[rsp]
  001a8	e8 00 00 00 00	 call	 exp
  001ad	f2 0f 11 84 24
	80 00 00 00	 movsd	 QWORD PTR ratio$[rsp], xmm0

; 43   :     x = 1.0;

  001b6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001be	f2 0f 11 44 24
	30		 movsd	 QWORD PTR x$[rsp], xmm0

; 44   : 
; 45   :     for (i = 0; i < num_samples; i++)

  001c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001cc	eb 0a		 jmp	 SHORT $LN4@main
$LN2@main:
  001ce	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  001d2	ff c0		 inc	 eax
  001d4	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@main:
  001d8	8b 44 24 24	 mov	 eax, DWORD PTR num_samples$[rsp]
  001dc	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  001e0	7d 63		 jge	 SHORT $LN3@main

; 46   :     {
; 47   :         sample = sin(angle_increment * i);

  001e2	f2 0f 2a 44 24
	20		 cvtsi2sd xmm0, DWORD PTR i$[rsp]
  001e8	f2 0f 10 4c 24
	78		 movsd	 xmm1, QWORD PTR angle_increment$[rsp]
  001ee	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001f2	0f 28 c1	 movaps	 xmm0, xmm1
  001f5	e8 00 00 00 00	 call	 sin
  001fa	f2 0f 11 44 24
	38		 movsd	 QWORD PTR sample$[rsp], xmm0

; 48   :         x *= ratio;

  00200	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR x$[rsp]
  00206	f2 0f 59 84 24
	80 00 00 00	 mulsd	 xmm0, QWORD PTR ratio$[rsp]
  0020f	f2 0f 11 44 24
	30		 movsd	 QWORD PTR x$[rsp], xmm0

; 49   :         sample *= x;

  00215	f2 0f 10 44 24
	38		 movsd	 xmm0, QWORD PTR sample$[rsp]
  0021b	f2 0f 59 44 24
	30		 mulsd	 xmm0, QWORD PTR x$[rsp]
  00221	f2 0f 11 44 24
	38		 movsd	 QWORD PTR sample$[rsp], xmm0

; 50   :         fprintf(file_pointer, "%.8lf\n", sample);

  00227	f2 0f 10 54 24
	38		 movsd	 xmm2, QWORD PTR sample$[rsp]
  0022d	66 49 0f 7e d0	 movq	 r8, xmm2
  00232	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7777
  00239	48 8b 4c 24 28	 mov	 rcx, QWORD PTR file_pointer$[rsp]
  0023e	e8 00 00 00 00	 call	 fprintf

; 51   :     }

  00243	eb 89		 jmp	 SHORT $LN2@main
$LN3@main:

; 52   : 
; 53   :     fclose(file_pointer);

  00245	48 8b 4c 24 28	 mov	 rcx, QWORD PTR file_pointer$[rsp]
  0024a	e8 00 00 00 00	 call	 fclose

; 54   :     printf("Done\n");

  0024f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7778
  00256	e8 00 00 00 00	 call	 printf

; 55   : 
; 56   :     return 0;

  0025b	33 c0		 xor	 eax, eax
$LN1@main:

; 57   : }

  0025d	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00264	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT

; 952  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 953  :         int _Result;
; 954  :         va_list _ArgList;
; 955  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 956  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00022	b9 01 00 00 00	 mov	 ecx, 1
  00027	e8 00 00 00 00	 call	 __acrt_iob_func
  0002c	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00031	45 33 c0	 xor	 r8d, r8d
  00034	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Format$[rsp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	e8 00 00 00 00	 call	 _vfprintf_l
  00041	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 957  :         __crt_va_end(_ArgList);

  00045	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 958  :         return _Result;

  0004e	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 959  :     }

  00052	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00056	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT fprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Stream$ = 64
_Format$ = 72
fprintf	PROC						; COMDAT

; 833  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 834  :         int _Result;
; 835  :         va_list _ArgList;
; 836  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 837  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Stream$[rsp]
  00034	e8 00 00 00 00	 call	 _vfprintf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 838  :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 839  :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 840  :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 640  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 641  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0002c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00036	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00039	e8 00 00 00 00	 call	 __stdio_common_vfprintf

; 642  :     }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
