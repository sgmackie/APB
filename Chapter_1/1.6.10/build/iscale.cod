; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25507.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
$SG7791	DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG7772	DB	'Error: unrecognized option %s', 0aH, 00H
	ORG $+1
$SG7774	DB	'Insufficient arguments', 0aH, 00H
$SG7775	DB	'Usage: itable [-m][-i] N startval [outfile.txt]', 0aH, 00H
	ORG $+3
$SG7788	DB	'w', 00H
	ORG $+2
$SG7778	DB	'Error: N (%d) out of range. Must be between 1 and 24.', 0aH
	DB	00H
	ORG $+1
$SG7781	DB	'Error: MIDI startval (%f) must be <= 127.', 0aH, 00H
	ORG $+5
$SG7784	DB	'Error: MIDI startval (%f) must be >= 0.', 0aH, 00H
	ORG $+7
$SG7786	DB	'Error: frequency startval (%f) must be positive.', 0aH, 00H
	ORG $+6
$SG7790	DB	'WARNING: unable to create file %s', 0aH, 00H
	ORG $+5
$SG7796	DB	'%d:', 09H, '%f', 09H, '%f', 0aH, 00H
	ORG $+5
$SG7797	DB	'%d:', 09H, '%f', 0aH, 00H
$SG7801	DB	'%d:', 09H, '%f', 09H, '%f', 0aH, 00H
	ORG $+5
$SG7802	DB	'%d:', 09H, '%f', 0aH, 00H
$SG7805	DB	'There was an error writing the file.', 0aH, 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	fprintf
PUBLIC	printf
PUBLIC	main
PUBLIC	__real@3fb5555555555555
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@405fc00000000000
PUBLIC	__real@406b800000000000
EXTRN	__acrt_iob_func:PROC
EXTRN	fclose:PROC
EXTRN	fopen:PROC
EXTRN	perror:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	atof:PROC
EXTRN	atoi:PROC
EXTRN	pow:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$fprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN37
	DD	imagerel $LN37+1372
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __real@406b800000000000
CONST	SEGMENT
__real@406b800000000000 DQ 0406b800000000000r	; 220
CONST	ENDS
;	COMDAT __real@405fc00000000000
CONST	SEGMENT
__real@405fc00000000000 DQ 0405fc00000000000r	; 127
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fb5555555555555
CONST	SEGMENT
__real@3fb5555555555555 DQ 03fb5555555555555r	; 0.0833333
CONST	ENDS
xdata	SEGMENT
$unwind$main DD	022219H
	DD	02f0110H
	DD	imagerel __GSHandlerCheck
	DD	0160H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File k:\audio\editing\current\programming\the_audio_programming_book\test_code\chapter_1\1.6.10\code\iscale.c
_TEXT	SEGMENT
i$ = 48
notes$ = 52
err$ = 56
startval$ = 64
ismidi$ = 72
write_interval$ = 76
fp$ = 80
ratio$ = 88
basefreq$ = 96
c5$1 = 104
c0$2 = 112
tv189 = 120
tv208 = 128
intervals$ = 144
__$ArrayPad$ = 352
argc$ = 384
argv$ = 392
main	PROC

; 8    : {

$LN37:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00010	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00017	48 33 c4	 xor	 rax, rsp
  0001a	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 9    : 	int notes, i;
; 10   : 	int ismidi = 0;

  00022	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR ismidi$[rsp], 0

; 11   : 	int write_interval = 0;

  0002a	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR write_interval$[rsp], 0

; 12   : 	int err = 0 ;

  00032	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0
$LN2@main:

; 13   : 	double startval, basefreq, ratio;
; 14   : 	FILE* fp;
; 15   : 	double intervals[25];
; 16   : 	
; 17   : 	while(argc > 1)

  0003a	83 bc 24 80 01
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00042	0f 8e e5 00 00
	00		 jle	 $LN3@main

; 18   : 	{
; 19   : 		if(argv[1][0] == '-')

  00048	b8 08 00 00 00	 mov	 eax, 8
  0004d	48 6b c0 01	 imul	 rax, rax, 1
  00051	b9 01 00 00 00	 mov	 ecx, 1
  00056	48 6b c9 00	 imul	 rcx, rcx, 0
  0005a	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00062	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00066	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  0006a	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0006d	0f 85 b3 00 00
	00		 jne	 $LN10@main

; 20   : 		{
; 21   : 			if(argv[1][1] == 'm')

  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 01	 imul	 rax, rax, 1
  0007c	b9 01 00 00 00	 mov	 ecx, 1
  00081	48 6b c9 01	 imul	 rcx, rcx, 1
  00085	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0008d	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00091	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00095	83 f8 6d	 cmp	 eax, 109		; 0000006dH
  00098	75 0a		 jne	 SHORT $LN12@main

; 22   : 				ismidi = 1;

  0009a	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR ismidi$[rsp], 1
  000a2	eb 5c		 jmp	 SHORT $LN13@main
$LN12@main:

; 23   : 			else if (argv[1][1] == 'i')

  000a4	b8 08 00 00 00	 mov	 eax, 8
  000a9	48 6b c0 01	 imul	 rax, rax, 1
  000ad	b9 01 00 00 00	 mov	 ecx, 1
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  000be	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  000c2	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  000c6	83 f8 69	 cmp	 eax, 105		; 00000069H
  000c9	75 0a		 jne	 SHORT $LN14@main

; 24   : 				write_interval = 1;

  000cb	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR write_interval$[rsp], 1
  000d3	eb 2b		 jmp	 SHORT $LN15@main
$LN14@main:

; 25   : 			else
; 26   : 			{
; 27   : 				printf("Error: unrecognized option %s\n",argv[1]);

  000d5	b8 08 00 00 00	 mov	 eax, 8
  000da	48 6b c0 01	 imul	 rax, rax, 1
  000de	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e6	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7772
  000f1	e8 00 00 00 00	 call	 printf

; 28   : 				return 1;

  000f6	b8 01 00 00 00	 mov	 eax, 1
  000fb	e9 44 04 00 00	 jmp	 $LN1@main
$LN15@main:
$LN13@main:

; 29   : 			}
; 30   : 			
; 31   : 		argc--;

  00100	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00107	ff c8		 dec	 eax
  00109	89 84 24 80 01
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 32   : 		argv++;

  00110	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00118	48 83 c0 08	 add	 rax, 8
  0011c	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR argv$[rsp], rax

; 33   : 		}

  00124	eb 02		 jmp	 SHORT $LN11@main
$LN10@main:

; 34   : 		
; 35   : 		else
; 36   : 		{
; 37   : 			break;

  00126	eb 05		 jmp	 SHORT $LN3@main
$LN11@main:

; 38   : 		}
; 39   : 	}

  00128	e9 0d ff ff ff	 jmp	 $LN2@main
$LN3@main:

; 40   : 	
; 41   : 	if(argc < 3)

  0012d	83 bc 24 80 01
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00135	7d 22		 jge	 SHORT $LN16@main

; 42   : 	{
; 43   : 		printf("Insufficient arguments\n");

  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7774
  0013e	e8 00 00 00 00	 call	 printf

; 44   : 		printf("Usage: itable [-m][-i] N startval [outfile.txt]\n");

  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7775
  0014a	e8 00 00 00 00	 call	 printf

; 45   : 		return 1;

  0014f	b8 01 00 00 00	 mov	 eax, 1
  00154	e9 eb 03 00 00	 jmp	 $LN1@main
$LN16@main:

; 46   : 	}
; 47   : 	
; 48   : 	
; 49   : 	notes = atoi(argv[1]);

  00159	b8 08 00 00 00	 mov	 eax, 8
  0015e	48 6b c0 01	 imul	 rax, rax, 1
  00162	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0016a	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0016e	e8 00 00 00 00	 call	 atoi
  00173	89 44 24 34	 mov	 DWORD PTR notes$[rsp], eax

; 50   : 	
; 51   : 	if(notes < 1 || notes > 24)

  00177	83 7c 24 34 01	 cmp	 DWORD PTR notes$[rsp], 1
  0017c	7c 07		 jl	 SHORT $LN18@main
  0017e	83 7c 24 34 18	 cmp	 DWORD PTR notes$[rsp], 24
  00183	7e 1a		 jle	 SHORT $LN17@main
$LN18@main:

; 52   : 	{
; 53   : 		printf("Error: N (%d) out of range. Must be between 1 and 24.\n", notes);

  00185	8b 54 24 34	 mov	 edx, DWORD PTR notes$[rsp]
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7778
  00190	e8 00 00 00 00	 call	 printf

; 54   : 		return 1;

  00195	b8 01 00 00 00	 mov	 eax, 1
  0019a	e9 a5 03 00 00	 jmp	 $LN1@main
$LN17@main:

; 55   : 	}
; 56   : 	
; 57   : 	startval = atof(argv[2]);

  0019f	b8 08 00 00 00	 mov	 eax, 8
  001a4	48 6b c0 02	 imul	 rax, rax, 2
  001a8	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001b0	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001b4	e8 00 00 00 00	 call	 atof
  001b9	f2 0f 11 44 24
	40		 movsd	 QWORD PTR startval$[rsp], xmm0

; 58   : 	
; 59   : 	if(ismidi)

  001bf	83 7c 24 48 00	 cmp	 DWORD PTR ismidi$[rsp], 0
  001c4	0f 84 8b 00 00
	00		 je	 $LN19@main

; 60   : 	{
; 61   : 		if(startval > 127.0)

  001ca	f2 0f 10 44 24
	40		 movsd	 xmm0, QWORD PTR startval$[rsp]
  001d0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405fc00000000000
  001d8	76 21		 jbe	 SHORT $LN20@main

; 62   : 		{
; 63   : 			printf("Error: MIDI startval (%f) must be <= 127.\n", startval);

  001da	f2 0f 10 4c 24
	40		 movsd	 xmm1, QWORD PTR startval$[rsp]
  001e0	66 48 0f 7e ca	 movq	 rdx, xmm1
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7781
  001ec	e8 00 00 00 00	 call	 printf

; 64   : 			return 1;

  001f1	b8 01 00 00 00	 mov	 eax, 1
  001f6	e9 49 03 00 00	 jmp	 $LN1@main
$LN20@main:

; 65   : 		}
; 66   : 		
; 67   : 		if(startval < 0.0)

  001fb	0f 57 c0	 xorps	 xmm0, xmm0
  001fe	66 0f 2f 44 24
	40		 comisd	 xmm0, QWORD PTR startval$[rsp]
  00204	76 23		 jbe	 SHORT $LN21@main

; 68   :  		{	
; 69   : 			printf("Error: MIDI startval (%f) must be >= 0.\n", startval);

  00206	f2 0f 10 4c 24
	40		 movsd	 xmm1, QWORD PTR startval$[rsp]
  0020c	66 48 0f 7e ca	 movq	 rdx, xmm1
  00211	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7784
  00218	e8 00 00 00 00	 call	 printf

; 70   :  			return 1;

  0021d	b8 01 00 00 00	 mov	 eax, 1
  00222	e9 1d 03 00 00	 jmp	 $LN1@main

; 71   : 		}

  00227	eb 2c		 jmp	 SHORT $LN22@main
$LN21@main:

; 72   : 		
; 73   : 		else
; 74   : 		{
; 75   : 			if(startval <= 0.0)

  00229	0f 57 c0	 xorps	 xmm0, xmm0
  0022c	66 0f 2f 44 24
	40		 comisd	 xmm0, QWORD PTR startval$[rsp]
  00232	72 21		 jb	 SHORT $LN23@main

; 76   : 			{
; 77   : 				printf("Error: frequency startval (%f) must be positive.\n", startval);

  00234	f2 0f 10 4c 24
	40		 movsd	 xmm1, QWORD PTR startval$[rsp]
  0023a	66 48 0f 7e ca	 movq	 rdx, xmm1
  0023f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7786
  00246	e8 00 00 00 00	 call	 printf

; 78   : 				return 1;

  0024b	b8 01 00 00 00	 mov	 eax, 1
  00250	e9 ef 02 00 00	 jmp	 $LN1@main
$LN23@main:
$LN22@main:
$LN19@main:

; 79   : 			}
; 80   : 		}
; 81   : 	}
; 82   : 	
; 83   : 	fp = NULL;

  00255	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR fp$[rsp], 0

; 84   : 	if(argc == 4)

  0025e	83 bc 24 80 01
	00 00 04	 cmp	 DWORD PTR argc$[rsp], 4
  00266	75 5b		 jne	 SHORT $LN24@main

; 85   : 	{
; 86   : 		fp = fopen(argv[2], "w");

  00268	b8 08 00 00 00	 mov	 eax, 8
  0026d	48 6b c0 02	 imul	 rax, rax, 2
  00271	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7788
  00278	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00280	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00284	e8 00 00 00 00	 call	 fopen
  00289	48 89 44 24 50	 mov	 QWORD PTR fp$[rsp], rax

; 87   : 		if(fp == NULL)

  0028e	48 83 7c 24 50
	00		 cmp	 QWORD PTR fp$[rsp], 0
  00294	75 2d		 jne	 SHORT $LN25@main

; 88   : 		{
; 89   : 			printf("WARNING: unable to create file %s\n", argv[3]);

  00296	b8 08 00 00 00	 mov	 eax, 8
  0029b	48 6b c0 03	 imul	 rax, rax, 3
  0029f	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002a7	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  002ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7790
  002b2	e8 00 00 00 00	 call	 printf

; 90   : 			perror("");

  002b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7791
  002be	e8 00 00 00 00	 call	 perror
$LN25@main:
$LN24@main:

; 91   : 		}
; 92   : 	}
; 93   : 	
; 94   : 	if(ismidi)

  002c3	83 7c 24 48 00	 cmp	 DWORD PTR ismidi$[rsp], 0
  002c8	0f 84 91 00 00
	00		 je	 $LN26@main

; 95   : 	{
; 96   : 		double c0, c5;
; 97   : 		ratio = pow(2.0, 1.0 / 12.0);

  002ce	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb5555555555555
  002d6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4000000000000000
  002de	e8 00 00 00 00	 call	 pow
  002e3	f2 0f 11 44 24
	58		 movsd	 QWORD PTR ratio$[rsp], xmm0

; 98   :  		c5 = 220.0 * pow(ratio, 3);

  002e9	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4008000000000000
  002f1	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR ratio$[rsp]
  002f7	e8 00 00 00 00	 call	 pow
  002fc	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@406b800000000000
  00304	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00308	0f 28 c1	 movaps	 xmm0, xmm1
  0030b	f2 0f 11 44 24
	68		 movsd	 QWORD PTR c5$1[rsp], xmm0

; 99   :  		c0 = c5 * pow(0.5, 5);

  00311	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4014000000000000
  00319	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00321	e8 00 00 00 00	 call	 pow
  00326	f2 0f 10 4c 24
	68		 movsd	 xmm1, QWORD PTR c5$1[rsp]
  0032c	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00330	0f 28 c1	 movaps	 xmm0, xmm1
  00333	f2 0f 11 44 24
	70		 movsd	 QWORD PTR c0$2[rsp], xmm0

; 100  :  		basefreq = c0 * pow(ratio, startval);

  00339	f2 0f 10 4c 24
	40		 movsd	 xmm1, QWORD PTR startval$[rsp]
  0033f	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR ratio$[rsp]
  00345	e8 00 00 00 00	 call	 pow
  0034a	f2 0f 10 4c 24
	70		 movsd	 xmm1, QWORD PTR c0$2[rsp]
  00350	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00354	0f 28 c1	 movaps	 xmm0, xmm1
  00357	f2 0f 11 44 24
	60		 movsd	 QWORD PTR basefreq$[rsp], xmm0

; 101  : 	}

  0035d	eb 0c		 jmp	 SHORT $LN27@main
$LN26@main:

; 102  : 	
; 103  : 	else
; 104  : 	{
; 105  : 		basefreq = startval;

  0035f	f2 0f 10 44 24
	40		 movsd	 xmm0, QWORD PTR startval$[rsp]
  00365	f2 0f 11 44 24
	60		 movsd	 QWORD PTR basefreq$[rsp], xmm0
$LN27@main:

; 106  : 	}
; 107  : 	
; 108  : 	ratio = pow(2.0, 1.0/notes);

  0036b	f2 0f 2a 44 24
	34		 cvtsi2sd xmm0, DWORD PTR notes$[rsp]
  00371	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00379	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0037d	0f 28 c1	 movaps	 xmm0, xmm1
  00380	0f 28 c8	 movaps	 xmm1, xmm0
  00383	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4000000000000000
  0038b	e8 00 00 00 00	 call	 pow
  00390	f2 0f 11 44 24
	58		 movsd	 QWORD PTR ratio$[rsp], xmm0

; 109  : 	for(i=0; i <= notes; i++)

  00396	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0039e	eb 0a		 jmp	 SHORT $LN6@main
$LN4@main:
  003a0	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  003a4	ff c0		 inc	 eax
  003a6	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN6@main:
  003aa	8b 44 24 34	 mov	 eax, DWORD PTR notes$[rsp]
  003ae	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  003b2	7f 28		 jg	 SHORT $LN5@main

; 110  : 	{
; 111  : 		intervals[i] = basefreq;

  003b4	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  003b9	f2 0f 10 44 24
	60		 movsd	 xmm0, QWORD PTR basefreq$[rsp]
  003bf	f2 0f 11 84 c4
	90 00 00 00	 movsd	 QWORD PTR intervals$[rsp+rax*8], xmm0

; 112  : 		basefreq *= ratio;

  003c8	f2 0f 10 44 24
	60		 movsd	 xmm0, QWORD PTR basefreq$[rsp]
  003ce	f2 0f 59 44 24
	58		 mulsd	 xmm0, QWORD PTR ratio$[rsp]
  003d4	f2 0f 11 44 24
	60		 movsd	 QWORD PTR basefreq$[rsp], xmm0

; 113  : 	}

  003da	eb c4		 jmp	 SHORT $LN4@main
$LN5@main:

; 114  : 	
; 115  : 	for(i=0; i <= notes; i++)

  003dc	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  003e4	eb 0a		 jmp	 SHORT $LN9@main
$LN7@main:
  003e6	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  003ea	ff c0		 inc	 eax
  003ec	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN9@main:
  003f0	8b 44 24 34	 mov	 eax, DWORD PTR notes$[rsp]
  003f4	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  003f8	0f 8f 1f 01 00
	00		 jg	 $LN8@main

; 116  : 	{
; 117  : 		if(write_interval)

  003fe	83 7c 24 4c 00	 cmp	 DWORD PTR write_interval$[rsp], 0
  00403	74 4b		 je	 SHORT $LN28@main

; 118  : 		{
; 119  : 			printf("%d:\t%f\t%f\n", i, pow(ratio, i), intervals[i]);

  00405	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0040a	48 89 44 24 78	 mov	 QWORD PTR tv189[rsp], rax
  0040f	f2 0f 2a 44 24
	30		 cvtsi2sd xmm0, DWORD PTR i$[rsp]
  00415	0f 28 c8	 movaps	 xmm1, xmm0
  00418	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR ratio$[rsp]
  0041e	e8 00 00 00 00	 call	 pow
  00423	48 8b 44 24 78	 mov	 rax, QWORD PTR tv189[rsp]
  00428	f2 0f 10 9c c4
	90 00 00 00	 movsd	 xmm3, QWORD PTR intervals$[rsp+rax*8]
  00431	66 49 0f 7e d9	 movq	 r9, xmm3
  00436	0f 28 d0	 movaps	 xmm2, xmm0
  00439	66 49 0f 7e d0	 movq	 r8, xmm2
  0043e	8b 54 24 30	 mov	 edx, DWORD PTR i$[rsp]
  00442	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7796
  00449	e8 00 00 00 00	 call	 printf

; 120  : 		}

  0044e	eb 23		 jmp	 SHORT $LN29@main
$LN28@main:

; 121  : 
; 122  : 		else
; 123  : 		{
; 124  : 			printf("%d:\t%f\n", i, intervals[i]);

  00450	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00455	f2 0f 10 94 c4
	90 00 00 00	 movsd	 xmm2, QWORD PTR intervals$[rsp+rax*8]
  0045e	66 49 0f 7e d0	 movq	 r8, xmm2
  00463	8b 54 24 30	 mov	 edx, DWORD PTR i$[rsp]
  00467	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7797
  0046e	e8 00 00 00 00	 call	 printf
$LN29@main:

; 125  : 		}
; 126  :  
; 127  : 		if(fp)

  00473	48 83 7c 24 50
	00		 cmp	 QWORD PTR fp$[rsp], 0
  00479	0f 84 99 00 00
	00		 je	 $LN30@main

; 128  : 		{
; 129  : 			if(write_interval)

  0047f	83 7c 24 4c 00	 cmp	 DWORD PTR write_interval$[rsp], 0
  00484	74 5c		 je	 SHORT $LN31@main

; 130  : 			{
; 131  : 				err = fprintf(fp,"%d:\t%f\t%f\n", i, pow(ratio, i), intervals[i]);

  00486	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0048b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv208[rsp], rax
  00493	f2 0f 2a 44 24
	30		 cvtsi2sd xmm0, DWORD PTR i$[rsp]
  00499	0f 28 c8	 movaps	 xmm1, xmm0
  0049c	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR ratio$[rsp]
  004a2	e8 00 00 00 00	 call	 pow
  004a7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv208[rsp]
  004af	f2 0f 10 8c c4
	90 00 00 00	 movsd	 xmm1, QWORD PTR intervals$[rsp+rax*8]
  004b8	f2 0f 11 4c 24
	20		 movsd	 QWORD PTR [rsp+32], xmm1
  004be	0f 28 d8	 movaps	 xmm3, xmm0
  004c1	66 49 0f 7e d9	 movq	 r9, xmm3
  004c6	44 8b 44 24 30	 mov	 r8d, DWORD PTR i$[rsp]
  004cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7801
  004d2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fp$[rsp]
  004d7	e8 00 00 00 00	 call	 fprintf
  004dc	89 44 24 38	 mov	 DWORD PTR err$[rsp], eax

; 132  : 			}

  004e0	eb 2d		 jmp	 SHORT $LN32@main
$LN31@main:

; 133  : 
; 134  : 			else
; 135  : 			{
; 136  : 				err = fprintf(fp,"%d:\t%f\n", i, intervals[i]);

  004e2	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  004e7	f2 0f 10 9c c4
	90 00 00 00	 movsd	 xmm3, QWORD PTR intervals$[rsp+rax*8]
  004f0	66 49 0f 7e d9	 movq	 r9, xmm3
  004f5	44 8b 44 24 30	 mov	 r8d, DWORD PTR i$[rsp]
  004fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7802
  00501	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fp$[rsp]
  00506	e8 00 00 00 00	 call	 fprintf
  0050b	89 44 24 38	 mov	 DWORD PTR err$[rsp], eax
$LN32@main:

; 137  : 			}
; 138  : 
; 139  : 			if(err < 0)

  0050f	83 7c 24 38 00	 cmp	 DWORD PTR err$[rsp], 0
  00514	7d 02		 jge	 SHORT $LN33@main

; 140  : 			{
; 141  : 				break;

  00516	eb 05		 jmp	 SHORT $LN8@main
$LN33@main:
$LN30@main:

; 142  : 			}	
; 143  : 		}
; 144  : 	}

  00518	e9 c9 fe ff ff	 jmp	 $LN7@main
$LN8@main:

; 145  : 	
; 146  : 	if(err < 0)

  0051d	83 7c 24 38 00	 cmp	 DWORD PTR err$[rsp], 0
  00522	7d 0c		 jge	 SHORT $LN34@main

; 147  : 	{
; 148  : 		perror("There was an error writing the file.\n");

  00524	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7805
  0052b	e8 00 00 00 00	 call	 perror
$LN34@main:

; 149  : 	}
; 150  : 
; 151  : 	if(fp)

  00530	48 83 7c 24 50
	00		 cmp	 QWORD PTR fp$[rsp], 0
  00536	74 0a		 je	 SHORT $LN35@main

; 152  : 	{
; 153  : 		fclose(fp);

  00538	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fp$[rsp]
  0053d	e8 00 00 00 00	 call	 fclose
$LN35@main:

; 154  : 	}
; 155  : 	
; 156  : 	return 0;

  00542	33 c0		 xor	 eax, eax
$LN1@main:

; 157  : }

  00544	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0054c	48 33 cc	 xor	 rcx, rsp
  0054f	e8 00 00 00 00	 call	 __security_check_cookie
  00554	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  0055b	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT

; 952  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 953  :         int _Result;
; 954  :         va_list _ArgList;
; 955  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 956  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00022	b9 01 00 00 00	 mov	 ecx, 1
  00027	e8 00 00 00 00	 call	 __acrt_iob_func
  0002c	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00031	45 33 c0	 xor	 r8d, r8d
  00034	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Format$[rsp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	e8 00 00 00 00	 call	 _vfprintf_l
  00041	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 957  :         __crt_va_end(_ArgList);

  00045	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 958  :         return _Result;

  0004e	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 959  :     }

  00052	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00056	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT fprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Stream$ = 64
_Format$ = 72
fprintf	PROC						; COMDAT

; 833  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 834  :         int _Result;
; 835  :         va_list _ArgList;
; 836  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 837  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Stream$[rsp]
  00034	e8 00 00 00 00	 call	 _vfprintf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 838  :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 839  :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 840  :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 640  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 641  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0002c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00036	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00039	e8 00 00 00 00	 call	 __stdio_common_vfprintf

; 642  :     }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
