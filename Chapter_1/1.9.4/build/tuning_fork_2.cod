; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25507.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG7773	DB	'Usage: tuning_fork, outfile.txt, duration, frequency, sa'
	DB	'mple rate, amplitude', 0aH, 00H
	ORG $+2
$SG7774	DB	'w', 00H
	ORG $+6
$SG7776	DB	'Error: Unable to create output file %s', 0aH, 00H
$SG7777	DB	'%.8lf', 0aH, 00H
	ORG $+1
$SG7779	DB	'Done. Maximum sample value = %.8lf', 0aH, 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	fprintf
PUBLIC	printf
PUBLIC	main
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@401921fb54524550
EXTRN	__acrt_iob_func:PROC
EXTRN	fclose:PROC
EXTRN	fopen:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	atof:PROC
EXTRN	fabs:PROC
EXTRN	pow:PROC
EXTRN	sin:PROC
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$fprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN9
	DD	imagerel $LN9+707
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __real@401921fb54524550
CONST	SEGMENT
__real@401921fb54524550 DQ 0401921fb54524550r	; 6.28319
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
xdata	SEGMENT
$unwind$main DD	021001H
	DD	0150110H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File k:\audio\editing\current\programming\the_audio_programming_book\test_code\chapter_1\1.9.4\code\tuning_fork_2.c
_TEXT	SEGMENT
i$ = 32
num_samples$ = 36
sample$ = 40
start$ = 48
file_pointer$ = 56
max_sample$ = 64
sample_rate$ = 72
tv76 = 80
duration$ = 88
double_pi$ = 96
frequency$ = 104
end$ = 112
tv139 = 120
angle_increment$ = 128
amplitude$ = 136
ratio$ = 144
argc$ = 176
argv$ = 184
main	PROC

; 12   : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 13   :     int i, num_samples;
; 14   :     double sample, duration, frequency, sample_rate, amplitude, max_sample;
; 15   :     double start, end, ratio, angle_increment;
; 16   :     double double_pi = 2.0 * M_PI;

  00010	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401921fb54524550
  00018	f2 0f 11 44 24
	60		 movsd	 QWORD PTR double_pi$[rsp], xmm0

; 17   : 
; 18   :     FILE* file_pointer = NULL;

  0001e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR file_pointer$[rsp], 0

; 19   : 
; 20   :     if(argc != ARG_NUM_ARGS)

  00027	83 bc 24 b0 00
	00 00 06	 cmp	 DWORD PTR argc$[rsp], 6
  0002f	74 23		 je	 SHORT $LN5@main

; 21   :     {
; 22   :         fprintf(stderr, "Usage: tuning_fork, outfile.txt, duration, frequency, sample rate, amplitude\n");

  00031	b9 02 00 00 00	 mov	 ecx, 2
  00036	e8 00 00 00 00	 call	 __acrt_iob_func
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7773
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 fprintf

; 23   :         return 1;

  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	e9 67 02 00 00	 jmp	 $LN1@main
$LN5@main:

; 24   :     }
; 25   : 
; 26   :     file_pointer = fopen(argv[ARG_OUTFILE], "w");

  00054	b8 08 00 00 00	 mov	 eax, 8
  00059	48 6b c0 01	 imul	 rax, rax, 1
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7774
  00064	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0006c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00070	e8 00 00 00 00	 call	 fopen
  00075	48 89 44 24 38	 mov	 QWORD PTR file_pointer$[rsp], rax

; 27   : 
; 28   :     if(file_pointer == NULL)

  0007a	48 83 7c 24 38
	00		 cmp	 QWORD PTR file_pointer$[rsp], 0
  00080	75 42		 jne	 SHORT $LN6@main

; 29   :     {
; 30   :         fprintf(stderr, "Error: Unable to create output file %s\n", argv[ARG_OUTFILE]);

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	48 89 44 24 50	 mov	 QWORD PTR tv76[rsp], rax
  00090	b9 02 00 00 00	 mov	 ecx, 2
  00095	e8 00 00 00 00	 call	 __acrt_iob_func
  0009a	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000a2	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv76[rsp]
  000a7	4c 8b 04 11	 mov	 r8, QWORD PTR [rcx+rdx]
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7776
  000b2	48 8b c8	 mov	 rcx, rax
  000b5	e8 00 00 00 00	 call	 fprintf

; 31   :         return 1;

  000ba	b8 01 00 00 00	 mov	 eax, 1
  000bf	e9 f7 01 00 00	 jmp	 $LN1@main
$LN6@main:

; 32   :     }
; 33   : 
; 34   :     duration = atof(argv[ARG_DURATION]);

  000c4	b8 08 00 00 00	 mov	 eax, 8
  000c9	48 6b c0 02	 imul	 rax, rax, 2
  000cd	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000d5	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000d9	e8 00 00 00 00	 call	 atof
  000de	f2 0f 11 44 24
	58		 movsd	 QWORD PTR duration$[rsp], xmm0

; 35   :     frequency = atof(argv[ARG_FREQUENCY]);

  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 03	 imul	 rax, rax, 3
  000ed	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000f5	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000f9	e8 00 00 00 00	 call	 atof
  000fe	f2 0f 11 44 24
	68		 movsd	 QWORD PTR frequency$[rsp], xmm0

; 36   :     sample_rate = atof(argv[ARG_SAMPLE_RATE]);

  00104	b8 08 00 00 00	 mov	 eax, 8
  00109	48 6b c0 04	 imul	 rax, rax, 4
  0010d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00115	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00119	e8 00 00 00 00	 call	 atof
  0011e	f2 0f 11 44 24
	48		 movsd	 QWORD PTR sample_rate$[rsp], xmm0

; 37   :     amplitude = atof(argv[ARG_AMPLITUDE]);

  00124	b8 08 00 00 00	 mov	 eax, 8
  00129	48 6b c0 05	 imul	 rax, rax, 5
  0012d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00135	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00139	e8 00 00 00 00	 call	 atof
  0013e	f2 0f 11 84 24
	88 00 00 00	 movsd	 QWORD PTR amplitude$[rsp], xmm0

; 38   : 
; 39   :     num_samples = (int) (duration * sample_rate);

  00147	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR duration$[rsp]
  0014d	f2 0f 59 44 24
	48		 mulsd	 xmm0, QWORD PTR sample_rate$[rsp]
  00153	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00157	89 44 24 24	 mov	 DWORD PTR num_samples$[rsp], eax

; 40   :     angle_increment = double_pi * frequency / sample_rate;

  0015b	f2 0f 10 44 24
	60		 movsd	 xmm0, QWORD PTR double_pi$[rsp]
  00161	f2 0f 59 44 24
	68		 mulsd	 xmm0, QWORD PTR frequency$[rsp]
  00167	f2 0f 5e 44 24
	48		 divsd	 xmm0, QWORD PTR sample_rate$[rsp]
  0016d	f2 0f 11 84 24
	80 00 00 00	 movsd	 QWORD PTR angle_increment$[rsp], xmm0

; 41   :     start = 1.0;

  00176	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0017e	f2 0f 11 44 24
	30		 movsd	 QWORD PTR start$[rsp], xmm0

; 42   :     end = 1.0e-4;

  00184	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  0018c	f2 0f 11 44 24
	70		 movsd	 QWORD PTR end$[rsp], xmm0

; 43   :     max_sample = 0.0;

  00192	0f 57 c0	 xorps	 xmm0, xmm0
  00195	f2 0f 11 44 24
	40		 movsd	 QWORD PTR max_sample$[rsp], xmm0

; 44   :     ratio = pow(end / start, 1.0 / num_samples);

  0019b	f2 0f 2a 44 24
	24		 cvtsi2sd xmm0, DWORD PTR num_samples$[rsp]
  001a1	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001a9	f2 0f 5e c8	 divsd	 xmm1, xmm0
  001ad	0f 28 c1	 movaps	 xmm0, xmm1
  001b0	f2 0f 10 4c 24
	70		 movsd	 xmm1, QWORD PTR end$[rsp]
  001b6	f2 0f 5e 4c 24
	30		 divsd	 xmm1, QWORD PTR start$[rsp]
  001bc	f2 0f 11 4c 24
	78		 movsd	 QWORD PTR tv139[rsp], xmm1
  001c2	0f 28 c8	 movaps	 xmm1, xmm0
  001c5	f2 0f 10 44 24
	78		 movsd	 xmm0, QWORD PTR tv139[rsp]
  001cb	e8 00 00 00 00	 call	 pow
  001d0	f2 0f 11 84 24
	90 00 00 00	 movsd	 QWORD PTR ratio$[rsp], xmm0

; 45   : 
; 46   :     for (i = 0; i < num_samples; i++)

  001d9	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001e1	eb 0a		 jmp	 SHORT $LN4@main
$LN2@main:
  001e3	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  001e7	ff c0		 inc	 eax
  001e9	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@main:
  001ed	8b 44 24 24	 mov	 eax, DWORD PTR num_samples$[rsp]
  001f1	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  001f5	0f 8d 9d 00 00
	00		 jge	 $LN3@main

; 47   :     {
; 48   :         sample = amplitude * sin(angle_increment * i);

  001fb	f2 0f 2a 44 24
	20		 cvtsi2sd xmm0, DWORD PTR i$[rsp]
  00201	f2 0f 10 8c 24
	80 00 00 00	 movsd	 xmm1, QWORD PTR angle_increment$[rsp]
  0020a	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0020e	0f 28 c1	 movaps	 xmm0, xmm1
  00211	e8 00 00 00 00	 call	 sin
  00216	f2 0f 10 8c 24
	88 00 00 00	 movsd	 xmm1, QWORD PTR amplitude$[rsp]
  0021f	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00223	0f 28 c1	 movaps	 xmm0, xmm1
  00226	f2 0f 11 44 24
	28		 movsd	 QWORD PTR sample$[rsp], xmm0

; 49   :         sample *= start;

  0022c	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR sample$[rsp]
  00232	f2 0f 59 44 24
	30		 mulsd	 xmm0, QWORD PTR start$[rsp]
  00238	f2 0f 11 44 24
	28		 movsd	 QWORD PTR sample$[rsp], xmm0

; 50   :         start *= ratio;

  0023e	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR start$[rsp]
  00244	f2 0f 59 84 24
	90 00 00 00	 mulsd	 xmm0, QWORD PTR ratio$[rsp]
  0024d	f2 0f 11 44 24
	30		 movsd	 QWORD PTR start$[rsp], xmm0

; 51   :         fprintf(file_pointer, "%.8lf\n", sample);

  00253	f2 0f 10 54 24
	28		 movsd	 xmm2, QWORD PTR sample$[rsp]
  00259	66 49 0f 7e d0	 movq	 r8, xmm2
  0025e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7777
  00265	48 8b 4c 24 38	 mov	 rcx, QWORD PTR file_pointer$[rsp]
  0026a	e8 00 00 00 00	 call	 fprintf

; 52   : 
; 53   :         if(fabs(sample) > max_sample)

  0026f	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR sample$[rsp]
  00275	e8 00 00 00 00	 call	 fabs
  0027a	66 0f 2f 44 24
	40		 comisd	 xmm0, QWORD PTR max_sample$[rsp]
  00280	76 11		 jbe	 SHORT $LN7@main

; 54   :         {
; 55   :             max_sample = fabs(sample);

  00282	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR sample$[rsp]
  00288	e8 00 00 00 00	 call	 fabs
  0028d	f2 0f 11 44 24
	40		 movsd	 QWORD PTR max_sample$[rsp], xmm0
$LN7@main:

; 56   :         }
; 57   : 
; 58   :     }

  00293	e9 4b ff ff ff	 jmp	 $LN2@main
$LN3@main:

; 59   : 
; 60   :     fclose(file_pointer);

  00298	48 8b 4c 24 38	 mov	 rcx, QWORD PTR file_pointer$[rsp]
  0029d	e8 00 00 00 00	 call	 fclose

; 61   :     printf("Done. Maximum sample value = %.8lf\n", max_sample);

  002a2	f2 0f 10 4c 24
	40		 movsd	 xmm1, QWORD PTR max_sample$[rsp]
  002a8	66 48 0f 7e ca	 movq	 rdx, xmm1
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7779
  002b4	e8 00 00 00 00	 call	 printf

; 62   : 
; 63   :     return 0;

  002b9	33 c0		 xor	 eax, eax
$LN1@main:

; 64   : }

  002bb	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  002c2	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT

; 952  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 953  :         int _Result;
; 954  :         va_list _ArgList;
; 955  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 956  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00022	b9 01 00 00 00	 mov	 ecx, 1
  00027	e8 00 00 00 00	 call	 __acrt_iob_func
  0002c	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00031	45 33 c0	 xor	 r8d, r8d
  00034	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Format$[rsp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	e8 00 00 00 00	 call	 _vfprintf_l
  00041	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 957  :         __crt_va_end(_ArgList);

  00045	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 958  :         return _Result;

  0004e	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 959  :     }

  00052	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00056	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT fprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Stream$ = 64
_Format$ = 72
fprintf	PROC						; COMDAT

; 833  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 834  :         int _Result;
; 835  :         va_list _ArgList;
; 836  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 837  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Stream$[rsp]
  00034	e8 00 00 00 00	 call	 _vfprintf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 838  :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 839  :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 840  :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 640  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 641  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0002c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00036	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00039	e8 00 00 00 00	 call	 __stdio_common_vfprintf

; 642  :     }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
