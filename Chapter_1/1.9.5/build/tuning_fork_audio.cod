; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25507.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	endianness
_DATA	SEGMENT
endianness DQ	FLAT:$SG7756
	DQ	FLAT:$SG7757
$SG7756	DB	'big_endian', 00H
	ORG $+5
$SG7757	DB	'little_endian', 00H
	ORG $+2
$SG7800	DB	'Usage: tuning_fork_audio, outfile.raw, duration, frequen'
	DB	'cy, sample rate, amplitude, type', 0aH, 00H
	ORG $+2
$SG7803	DB	'wb', 00H
	ORG $+1
$SG7802	DB	'Error: Sample type (%d) can only be 1 or 0', 0aH, 00H
	ORG $+4
$SG7805	DB	'Error: Unable to create output file %s', 0aH, 00H
$SG7806	DB	'Writing %d %s samples', 0aH, 00H
	ORG $+1
$SG7810	DB	'Error: Cannot write to file', 0aH, 00H
	ORG $+3
$SG7813	DB	'Error: Cannot write to file', 0aH, 00H
	ORG $+3
$SG7815	DB	'Done. Maximum sample value = %.8lf at frame %d', 0aH, 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	fprintf
PUBLIC	printf
PUBLIC	byte_order
PUBLIC	main
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@401921fb54524550
PUBLIC	__real@40dfffc000000000
EXTRN	__acrt_iob_func:PROC
EXTRN	fclose:PROC
EXTRN	fopen:PROC
EXTRN	fwrite:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	atof:PROC
EXTRN	atoi:PROC
EXTRN	fabs:PROC
EXTRN	pow:PROC
EXTRN	sin:PROC
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$fprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$byte_order DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$byte_order
$pdata$main DD	imagerel $LN18
	DD	imagerel $LN18+1229
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __real@40dfffc000000000
CONST	SEGMENT
__real@40dfffc000000000 DQ 040dfffc000000000r	; 32767
CONST	ENDS
;	COMDAT __real@401921fb54524550
CONST	SEGMENT
__real@401921fb54524550 DQ 0401921fb54524550r	; 6.28319
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
xdata	SEGMENT
$unwind$byte_order DD 010401H
	DD	02204H
$unwind$main DD	021001H
	DD	0190110H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File k:\audio\editing\current\programming\the_audio_programming_book\test_code\chapter_1\1.9.5\code\tuning_fork_audio.c
_TEXT	SEGMENT
i$ = 32
num_samples$ = 36
short_sample$ = 40
sample$ = 48
sample_type$ = 56
max_frame$ = 60
start$ = 64
file_ptr$ = 72
max_sample$ = 80
endian$ = 88
duration$ = 96
angle_increment$ = 104
amplitude$ = 112
ratio$ = 120
float_sample$ = 128
tv134 = 136
sample_rate$ = 144
double_pi$ = 152
frequency$ = 160
end$ = 168
tv152 = 176
step$ = 184
argc$ = 208
argv$ = 216
main	PROC

; 22   : {

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 23   :     unsigned int i, num_samples;
; 24   :     unsigned int max_frame = 0;

  00010	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR max_frame$[rsp], 0

; 25   :     unsigned int sample_type, endian, bit_reverse;
; 26   :     double sample, duration, frequency, sample_rate, amplitude, step;
; 27   :     double start, end, ratio, max_sample;
; 28   :     double double_pi = 2.0 * M_PI;

  00018	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401921fb54524550
  00020	f2 0f 11 84 24
	98 00 00 00	 movsd	 QWORD PTR double_pi$[rsp], xmm0

; 29   :     double angle_increment;
; 30   : 
; 31   :     FILE* file_ptr = NULL;

  00029	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR file_ptr$[rsp], 0

; 32   :     float float_sample;
; 33   :     short short_sample;
; 34   : 
; 35   :     if(argc != ARG_NUM_ARGS)

  00032	83 bc 24 d0 00
	00 00 07	 cmp	 DWORD PTR argc$[rsp], 7
  0003a	74 23		 je	 SHORT $LN8@main

; 36   :     {
; 37   :         fprintf(stderr, "Usage: tuning_fork_audio, outfile.raw, duration, frequency, sample rate, amplitude, type\n");

  0003c	b9 02 00 00 00	 mov	 ecx, 2
  00041	e8 00 00 00 00	 call	 __acrt_iob_func
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7800
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 fprintf

; 38   :         return 1;

  00055	b8 01 00 00 00	 mov	 eax, 1
  0005a	e9 66 04 00 00	 jmp	 $LN1@main
$LN8@main:

; 39   :     }
; 40   : 
; 41   :     duration = atof(argv[ARG_DURATION]);

  0005f	b8 08 00 00 00	 mov	 eax, 8
  00064	48 6b c0 02	 imul	 rax, rax, 2
  00068	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00070	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00074	e8 00 00 00 00	 call	 atof
  00079	f2 0f 11 44 24
	60		 movsd	 QWORD PTR duration$[rsp], xmm0

; 42   :     frequency = atof(argv[ARG_FREQUENCY]);

  0007f	b8 08 00 00 00	 mov	 eax, 8
  00084	48 6b c0 03	 imul	 rax, rax, 3
  00088	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00090	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00094	e8 00 00 00 00	 call	 atof
  00099	f2 0f 11 84 24
	a0 00 00 00	 movsd	 QWORD PTR frequency$[rsp], xmm0

; 43   :     sample_rate = atof(argv[ARG_SAMPLE_RATE]);

  000a2	b8 08 00 00 00	 mov	 eax, 8
  000a7	48 6b c0 04	 imul	 rax, rax, 4
  000ab	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000b3	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000b7	e8 00 00 00 00	 call	 atof
  000bc	f2 0f 11 84 24
	90 00 00 00	 movsd	 QWORD PTR sample_rate$[rsp], xmm0

; 44   :     amplitude = atof(argv[ARG_AMPLITUDE]);

  000c5	b8 08 00 00 00	 mov	 eax, 8
  000ca	48 6b c0 05	 imul	 rax, rax, 5
  000ce	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000d6	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000da	e8 00 00 00 00	 call	 atof
  000df	f2 0f 11 44 24
	70		 movsd	 QWORD PTR amplitude$[rsp], xmm0

; 45   :     sample_type = (unsigned int) atoi(argv[ARG_TYPE]);

  000e5	b8 08 00 00 00	 mov	 eax, 8
  000ea	48 6b c0 06	 imul	 rax, rax, 6
  000ee	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000f6	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000fa	e8 00 00 00 00	 call	 atoi
  000ff	89 44 24 38	 mov	 DWORD PTR sample_type$[rsp], eax

; 46   : 
; 47   :     if(sample_type > 1)

  00103	83 7c 24 38 01	 cmp	 DWORD PTR sample_type$[rsp], 1
  00108	76 28		 jbe	 SHORT $LN9@main

; 48   :     {
; 49   :         fprintf(stderr, "Error: Sample type (%d) can only be 1 or 0\n", sample_type);

  0010a	b9 02 00 00 00	 mov	 ecx, 2
  0010f	e8 00 00 00 00	 call	 __acrt_iob_func
  00114	44 8b 44 24 38	 mov	 r8d, DWORD PTR sample_type$[rsp]
  00119	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7802
  00120	48 8b c8	 mov	 rcx, rax
  00123	e8 00 00 00 00	 call	 fprintf

; 50   :         return 1;

  00128	b8 01 00 00 00	 mov	 eax, 1
  0012d	e9 93 03 00 00	 jmp	 $LN1@main
$LN9@main:

; 51   :     }
; 52   : 
; 53   :     file_ptr = fopen(argv[ARG_OUTFILE], "wb");

  00132	b8 08 00 00 00	 mov	 eax, 8
  00137	48 6b c0 01	 imul	 rax, rax, 1
  0013b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7803
  00142	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0014a	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0014e	e8 00 00 00 00	 call	 fopen
  00153	48 89 44 24 48	 mov	 QWORD PTR file_ptr$[rsp], rax

; 54   :     
; 55   :     if(file_ptr == NULL)

  00158	48 83 7c 24 48
	00		 cmp	 QWORD PTR file_ptr$[rsp], 0
  0015e	75 48		 jne	 SHORT $LN10@main

; 56   :     {
; 57   :         fprintf(stderr, "Error: Unable to create output file %s\n", argv[ARG_OUTFILE]);

  00160	b8 08 00 00 00	 mov	 eax, 8
  00165	48 6b c0 01	 imul	 rax, rax, 1
  00169	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv134[rsp], rax
  00171	b9 02 00 00 00	 mov	 ecx, 2
  00176	e8 00 00 00 00	 call	 __acrt_iob_func
  0017b	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00183	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv134[rsp]
  0018b	4c 8b 04 11	 mov	 r8, QWORD PTR [rcx+rdx]
  0018f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7805
  00196	48 8b c8	 mov	 rcx, rax
  00199	e8 00 00 00 00	 call	 fprintf

; 58   :         return 1;

  0019e	b8 01 00 00 00	 mov	 eax, 1
  001a3	e9 1d 03 00 00	 jmp	 $LN1@main
$LN10@main:

; 59   :     }
; 60   : 
; 61   :     num_samples = (int) (duration * sample_rate);

  001a8	f2 0f 10 44 24
	60		 movsd	 xmm0, QWORD PTR duration$[rsp]
  001ae	f2 0f 59 84 24
	90 00 00 00	 mulsd	 xmm0, QWORD PTR sample_rate$[rsp]
  001b7	f2 0f 2c c0	 cvttsd2si eax, xmm0
  001bb	89 44 24 24	 mov	 DWORD PTR num_samples$[rsp], eax

; 62   :     angle_increment = double_pi * frequency / num_samples;

  001bf	f2 0f 10 84 24
	98 00 00 00	 movsd	 xmm0, QWORD PTR double_pi$[rsp]
  001c8	f2 0f 59 84 24
	a0 00 00 00	 mulsd	 xmm0, QWORD PTR frequency$[rsp]
  001d1	8b 44 24 24	 mov	 eax, DWORD PTR num_samples$[rsp]
  001d5	f2 48 0f 2a c8	 cvtsi2sd xmm1, rax
  001da	f2 0f 5e c1	 divsd	 xmm0, xmm1
  001de	f2 0f 11 44 24
	68		 movsd	 QWORD PTR angle_increment$[rsp], xmm0

; 63   :     step = duration / num_samples;

  001e4	8b 44 24 24	 mov	 eax, DWORD PTR num_samples$[rsp]
  001e8	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  001ed	f2 0f 10 4c 24
	60		 movsd	 xmm1, QWORD PTR duration$[rsp]
  001f3	f2 0f 5e c8	 divsd	 xmm1, xmm0
  001f7	0f 28 c1	 movaps	 xmm0, xmm1
  001fa	f2 0f 11 84 24
	b8 00 00 00	 movsd	 QWORD PTR step$[rsp], xmm0

; 64   : 
; 65   :     start = 1.0;

  00203	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0020b	f2 0f 11 44 24
	40		 movsd	 QWORD PTR start$[rsp], xmm0

; 66   :     end = 1.0e-4;

  00211	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  00219	f2 0f 11 84 24
	a8 00 00 00	 movsd	 QWORD PTR end$[rsp], xmm0

; 67   :     max_sample = 0.0;

  00222	0f 57 c0	 xorps	 xmm0, xmm0
  00225	f2 0f 11 44 24
	50		 movsd	 QWORD PTR max_sample$[rsp], xmm0

; 68   :     ratio = pow(end / start, 1.0 / num_samples);

  0022b	8b 44 24 24	 mov	 eax, DWORD PTR num_samples$[rsp]
  0022f	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00234	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0023c	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00240	0f 28 c1	 movaps	 xmm0, xmm1
  00243	f2 0f 10 8c 24
	a8 00 00 00	 movsd	 xmm1, QWORD PTR end$[rsp]
  0024c	f2 0f 5e 4c 24
	40		 divsd	 xmm1, QWORD PTR start$[rsp]
  00252	f2 0f 11 8c 24
	b0 00 00 00	 movsd	 QWORD PTR tv152[rsp], xmm1
  0025b	0f 28 c8	 movaps	 xmm1, xmm0
  0025e	f2 0f 10 84 24
	b0 00 00 00	 movsd	 xmm0, QWORD PTR tv152[rsp]
  00267	e8 00 00 00 00	 call	 pow
  0026c	f2 0f 11 44 24
	78		 movsd	 QWORD PTR ratio$[rsp], xmm0

; 69   :     endian = byte_order();

  00272	e8 00 00 00 00	 call	 byte_order
  00277	89 44 24 58	 mov	 DWORD PTR endian$[rsp], eax

; 70   : 
; 71   :     printf("Writing %d %s samples\n", num_samples, endianness[endian]);

  0027b	8b 44 24 58	 mov	 eax, DWORD PTR endian$[rsp]
  0027f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:endianness
  00286	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  0028a	8b 54 24 24	 mov	 edx, DWORD PTR num_samples$[rsp]
  0028e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7806
  00295	e8 00 00 00 00	 call	 printf

; 72   : 
; 73   :     if(sample_type == SAMPLE_SHORT)

  0029a	83 7c 24 38 00	 cmp	 DWORD PTR sample_type$[rsp], 0
  0029f	0f 85 04 01 00
	00		 jne	 $LN11@main

; 74   :     {
; 75   :         for (i = 0; i < num_samples; i++)

  002a5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  002ad	eb 0a		 jmp	 SHORT $LN4@main
$LN2@main:
  002af	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  002b3	ff c0		 inc	 eax
  002b5	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@main:
  002b9	8b 44 24 24	 mov	 eax, DWORD PTR num_samples$[rsp]
  002bd	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  002c1	0f 83 dd 00 00
	00		 jae	 $LN3@main

; 76   :         {
; 77   :             sample = amplitude * sin(angle_increment * i);

  002c7	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  002cb	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  002d0	f2 0f 10 4c 24
	68		 movsd	 xmm1, QWORD PTR angle_increment$[rsp]
  002d6	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  002da	0f 28 c1	 movaps	 xmm0, xmm1
  002dd	e8 00 00 00 00	 call	 sin
  002e2	f2 0f 10 4c 24
	70		 movsd	 xmm1, QWORD PTR amplitude$[rsp]
  002e8	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  002ec	0f 28 c1	 movaps	 xmm0, xmm1
  002ef	f2 0f 11 44 24
	30		 movsd	 QWORD PTR sample$[rsp], xmm0

; 78   :             sample *= start;

  002f5	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR sample$[rsp]
  002fb	f2 0f 59 44 24
	40		 mulsd	 xmm0, QWORD PTR start$[rsp]
  00301	f2 0f 11 44 24
	30		 movsd	 QWORD PTR sample$[rsp], xmm0

; 79   :             start *= ratio;

  00307	f2 0f 10 44 24
	40		 movsd	 xmm0, QWORD PTR start$[rsp]
  0030d	f2 0f 59 44 24
	78		 mulsd	 xmm0, QWORD PTR ratio$[rsp]
  00313	f2 0f 11 44 24
	40		 movsd	 QWORD PTR start$[rsp], xmm0

; 80   :             short_sample = (short) (sample * 32767.0);

  00319	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR sample$[rsp]
  0031f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40dfffc000000000
  00327	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0032b	66 89 44 24 28	 mov	 WORD PTR short_sample$[rsp], ax

; 81   : 
; 82   :             if(fwrite(&short_sample, sizeof(short), 1, file_ptr) != 1)

  00330	4c 8b 4c 24 48	 mov	 r9, QWORD PTR file_ptr$[rsp]
  00335	41 b8 01 00 00
	00		 mov	 r8d, 1
  0033b	ba 02 00 00 00	 mov	 edx, 2
  00340	48 8d 4c 24 28	 lea	 rcx, QWORD PTR short_sample$[rsp]
  00345	e8 00 00 00 00	 call	 fwrite
  0034a	48 83 f8 01	 cmp	 rax, 1
  0034e	74 23		 je	 SHORT $LN13@main

; 83   :             {
; 84   :                 fprintf(stderr, "Error: Cannot write to file\n");

  00350	b9 02 00 00 00	 mov	 ecx, 2
  00355	e8 00 00 00 00	 call	 __acrt_iob_func
  0035a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7810
  00361	48 8b c8	 mov	 rcx, rax
  00364	e8 00 00 00 00	 call	 fprintf

; 85   :                 return 1;

  00369	b8 01 00 00 00	 mov	 eax, 1
  0036e	e9 52 01 00 00	 jmp	 $LN1@main
$LN13@main:

; 86   :             }
; 87   : 
; 88   :             if(fabs(sample) > max_sample)

  00373	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR sample$[rsp]
  00379	e8 00 00 00 00	 call	 fabs
  0037e	66 0f 2f 44 24
	50		 comisd	 xmm0, QWORD PTR max_sample$[rsp]
  00384	76 19		 jbe	 SHORT $LN14@main

; 89   :             {
; 90   :                 max_sample = fabs(sample);

  00386	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR sample$[rsp]
  0038c	e8 00 00 00 00	 call	 fabs
  00391	f2 0f 11 44 24
	50		 movsd	 QWORD PTR max_sample$[rsp], xmm0

; 91   :                 max_frame = i;

  00397	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0039b	89 44 24 3c	 mov	 DWORD PTR max_frame$[rsp], eax
$LN14@main:

; 92   :             }
; 93   :         }

  0039f	e9 0b ff ff ff	 jmp	 $LN2@main
$LN3@main:

; 94   :     }

  003a4	e9 f4 00 00 00	 jmp	 $LN12@main
$LN11@main:

; 95   : 
; 96   :     else
; 97   :     {
; 98   :         for (i = 0; i < num_samples; i++)

  003a9	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  003b1	eb 0a		 jmp	 SHORT $LN7@main
$LN5@main:
  003b3	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  003b7	ff c0		 inc	 eax
  003b9	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN7@main:
  003bd	8b 44 24 24	 mov	 eax, DWORD PTR num_samples$[rsp]
  003c1	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  003c5	0f 83 d2 00 00
	00		 jae	 $LN6@main

; 99   :         {
; 100  :             sample = amplitude * sin(angle_increment * i);

  003cb	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  003cf	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  003d4	f2 0f 10 4c 24
	68		 movsd	 xmm1, QWORD PTR angle_increment$[rsp]
  003da	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  003de	0f 28 c1	 movaps	 xmm0, xmm1
  003e1	e8 00 00 00 00	 call	 sin
  003e6	f2 0f 10 4c 24
	70		 movsd	 xmm1, QWORD PTR amplitude$[rsp]
  003ec	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  003f0	0f 28 c1	 movaps	 xmm0, xmm1
  003f3	f2 0f 11 44 24
	30		 movsd	 QWORD PTR sample$[rsp], xmm0

; 101  :             sample *= start;

  003f9	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR sample$[rsp]
  003ff	f2 0f 59 44 24
	40		 mulsd	 xmm0, QWORD PTR start$[rsp]
  00405	f2 0f 11 44 24
	30		 movsd	 QWORD PTR sample$[rsp], xmm0

; 102  :             start *= ratio;

  0040b	f2 0f 10 44 24
	40		 movsd	 xmm0, QWORD PTR start$[rsp]
  00411	f2 0f 59 44 24
	78		 mulsd	 xmm0, QWORD PTR ratio$[rsp]
  00417	f2 0f 11 44 24
	40		 movsd	 QWORD PTR start$[rsp], xmm0

; 103  :             float_sample = (float) sample;

  0041d	f2 0f 5a 44 24
	30		 cvtsd2ss xmm0, QWORD PTR sample$[rsp]
  00423	f3 0f 11 84 24
	80 00 00 00	 movss	 DWORD PTR float_sample$[rsp], xmm0

; 104  : 
; 105  :             if(fwrite(&short_sample, sizeof(float), 1, file_ptr) != 1)

  0042c	4c 8b 4c 24 48	 mov	 r9, QWORD PTR file_ptr$[rsp]
  00431	41 b8 01 00 00
	00		 mov	 r8d, 1
  00437	ba 04 00 00 00	 mov	 edx, 4
  0043c	48 8d 4c 24 28	 lea	 rcx, QWORD PTR short_sample$[rsp]
  00441	e8 00 00 00 00	 call	 fwrite
  00446	48 83 f8 01	 cmp	 rax, 1
  0044a	74 20		 je	 SHORT $LN15@main

; 106  :             {
; 107  :                 fprintf(stderr, "Error: Cannot write to file\n");

  0044c	b9 02 00 00 00	 mov	 ecx, 2
  00451	e8 00 00 00 00	 call	 __acrt_iob_func
  00456	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG7813
  0045d	48 8b c8	 mov	 rcx, rax
  00460	e8 00 00 00 00	 call	 fprintf

; 108  :                 return 1;

  00465	b8 01 00 00 00	 mov	 eax, 1
  0046a	eb 59		 jmp	 SHORT $LN1@main
$LN15@main:

; 109  :             }
; 110  : 
; 111  :             if(fabs(sample) > max_sample)

  0046c	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR sample$[rsp]
  00472	e8 00 00 00 00	 call	 fabs
  00477	66 0f 2f 44 24
	50		 comisd	 xmm0, QWORD PTR max_sample$[rsp]
  0047d	76 19		 jbe	 SHORT $LN16@main

; 112  :             {
; 113  :                 max_sample = fabs(sample);

  0047f	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR sample$[rsp]
  00485	e8 00 00 00 00	 call	 fabs
  0048a	f2 0f 11 44 24
	50		 movsd	 QWORD PTR max_sample$[rsp], xmm0

; 114  :                 max_frame = i;

  00490	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00494	89 44 24 3c	 mov	 DWORD PTR max_frame$[rsp], eax
$LN16@main:

; 115  :             }
; 116  :         }

  00498	e9 16 ff ff ff	 jmp	 $LN5@main
$LN6@main:
$LN12@main:

; 117  :     }
; 118  : 
; 119  :     fclose(file_ptr);

  0049d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR file_ptr$[rsp]
  004a2	e8 00 00 00 00	 call	 fclose

; 120  :     printf("Done. Maximum sample value = %.8lf at frame %d\n", max_sample, max_frame);

  004a7	44 8b 44 24 3c	 mov	 r8d, DWORD PTR max_frame$[rsp]
  004ac	f2 0f 10 4c 24
	50		 movsd	 xmm1, QWORD PTR max_sample$[rsp]
  004b2	66 48 0f 7e ca	 movq	 rdx, xmm1
  004b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG7815
  004be	e8 00 00 00 00	 call	 printf

; 121  : 
; 122  :     return 0;

  004c3	33 c0		 xor	 eax, eax
$LN1@main:

; 123  : }

  004c5	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  004cc	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File k:\audio\editing\current\programming\the_audio_programming_book\test_code\chapter_1\1.9.5\code\tuning_fork_audio.c
_TEXT	SEGMENT
one$ = 0
endptr$ = 8
byte_order PROC

; 13   : {

$LN3:
  00000	48 83 ec 18	 sub	 rsp, 24

; 14   :     int one = 1;

  00004	c7 04 24 01 00
	00 00		 mov	 DWORD PTR one$[rsp], 1

; 15   :     char* endptr = (char *) &one;

  0000b	48 8d 04 24	 lea	 rax, QWORD PTR one$[rsp]
  0000f	48 89 44 24 08	 mov	 QWORD PTR endptr$[rsp], rax

; 16   :     return (*endptr);

  00014	48 8b 44 24 08	 mov	 rax, QWORD PTR endptr$[rsp]
  00019	0f be 00	 movsx	 eax, BYTE PTR [rax]

; 17   : }

  0001c	48 83 c4 18	 add	 rsp, 24
  00020	c3		 ret	 0
byte_order ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT

; 952  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 953  :         int _Result;
; 954  :         va_list _ArgList;
; 955  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 956  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00022	b9 01 00 00 00	 mov	 ecx, 1
  00027	e8 00 00 00 00	 call	 __acrt_iob_func
  0002c	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00031	45 33 c0	 xor	 r8d, r8d
  00034	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Format$[rsp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	e8 00 00 00 00	 call	 _vfprintf_l
  00041	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 957  :         __crt_va_end(_ArgList);

  00045	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 958  :         return _Result;

  0004e	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 959  :     }

  00052	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00056	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT fprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Stream$ = 64
_Format$ = 72
fprintf	PROC						; COMDAT

; 833  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 834  :         int _Result;
; 835  :         va_list _ArgList;
; 836  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 837  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Stream$[rsp]
  00034	e8 00 00 00 00	 call	 _vfprintf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 838  :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 839  :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 840  :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 640  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 641  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0002c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00036	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00039	e8 00 00 00 00	 call	 __stdio_common_vfprintf

; 642  :     }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
